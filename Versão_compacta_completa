{
  "name": "Automação Bradesco - Qualificação Inteligente",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "WEBHOOK/BRADESCO",
        "responseMode": "responseNode",
        "options": {"continueOnFail": true}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -7776,
        -1440
      ],
      "id": "aa783b4e-4e59-4a76-a06a-7e8cfc4c458e",
      "name": "Webhook",
      "webhookId": "b924e362-55ab-4cea-8cbb-6a9aa4f79120"
    },
    {
      "parameters": {
        "jsCode": "// Limite de execuções simultâneas (bem simples)\nconst data = $getWorkflowStaticData('global');\ndata.execucoesAtivas = (data.execucoesAtivas || 0) + 1;\nif (data.execucoesAtivas > 30) {\n  return [{ fila: true, motivo: 'Muitas execuções, tente novamente' }];\n}\nreturn $input.all();"
      },
      "id": "protecao-pico-001",
      "name": "Proteção Contra Pico",
      "type": "n8n-nodes-base.code",
      "position": [
        -7552,
        -1440
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "values": {
          "boolean": [
            {
              "name": "remarketing_on",
              "value": true
            }
          ]
        },
        "options": {
          "includeOtherFields": true
        }
      },
      "id": "ctrl-remarketing-001",
      "name": "CTRL",
      "type": "n8n-nodes-base.set",
      "position": [
        -7328,
        -1440
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "resource": "chat",
        "model": "gpt-4o-mini",
        "options": {"continueOnFail": true},
        "requestOptions": {}
      },
      "id": "67aedd3f-cfdb-4122-8d8e-e157de1a7042",
      "name": "OpenAI Primeira Qualificação",
      "type": "n8n-nodes-base.openAi",
      "position": [
        -6656,
        -1728
      ],
      "typeVersion": 1,
      "credentials": {
        "openAiApi": {
          "id": "openai-credentials",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "resource": "chat",
        "model": "gpt-4o-mini",
        "options": {"continueOnFail": true},
        "requestOptions": {}
      },
      "id": "62218a2e-8acb-49ec-a8dd-0554121922dd",
      "name": "Transcrever Áudio OpenAI",
      "type": "n8n-nodes-base.openAi",
      "position": [
        -6432,
        -672
      ],
      "typeVersion": 1,
      "credentials": {
        "openAiApi": {
          "id": "openai-credentials",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "resource": "chat",
        "model": "gpt-4o-mini",
        "options": {"continueOnFail": true},
        "requestOptions": {}
      },
      "id": "99814184-3558-4f86-a3df-6232eebc35c1",
      "name": "OpenAI Continuar Conversa",
      "type": "n8n-nodes-base.openAi",
      "position": [
        -5536,
        -576
      ],
      "typeVersion": 1,
      "credentials": {
        "openAiApi": {
          "id": "openai-credentials",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const dados = $input.all()[0].json;\n\n// Extrair resposta da OpenAI (módulo nativo retorna estrutura diferente)\nconst respostaOpenAI = dados.message?.content || dados.choices?.[0]?.message?.content || '';\n\n// Função para extrair informações estruturadas da resposta da OpenAI no loop\nfunction extrairInformacoesLoop(resposta) {\n  const informacoes = {\n    mensagem_mariana_loop: '',\n    dados_completos: false,\n    qualificacao_completa: false,\n    total_interacoes: 0,\n    dados_qualificacao: {},\n    proxima_acao: 'continuar'\n  };\n  \n  try {\n    // Contar interações baseado no contexto\n    const interacoesAnteriores = dados.total_interacoes || 0;\n    informacoes.total_interacoes = interacoesAnteriores + 1;\n    \n    // Extrair dados de qualificação se houver JSON estruturado\n    const jsonMatch = resposta.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n      try {\n        const dadosJson = JSON.parse(jsonMatch[0]);\n        informacoes.dados_qualificacao = dadosJson;\n        \n        // Verificar se todos os dados necessários estão presentes\n        const camposObrigatorios = ['idade_titular', 'total_vidas', 'tipo_contratacao', 'hospital_preferencia'];\n        const camposPresentes = camposObrigatorios.filter(campo => \n          dadosJson[campo] && dadosJson[campo].toString().trim() !== ''\n        );\n        \n        if (camposPresentes.length >= 3) {\n          informacoes.dados_completos = true;\n          informacoes.qualificacao_completa = true;\n          informacoes.proxima_acao = 'finalizar';\n        }\n      } catch (e) {\n        // Se não conseguir fazer parse do JSON, continuar\n      }\n    }\n    \n    // Extrair mensagem para o cliente\n    const mensagemMatch = resposta.match(/MENSAGEM[\\s\\S]*?(?=DADOS|$)/i);\n    if (mensagemMatch) {\n      informacoes.mensagem_mariana_loop = mensagemMatch[0].replace(/MENSAGEM[\\s:]*/i, '').trim();\n    } else {\n      // Se não encontrar seção MENSAGEM, usar a resposta completa\n      informacoes.mensagem_mariana_loop = resposta;\n    }\n    \n    // Verificar se a qualificação está completa baseado em palavras-chave\n    if (resposta.toLowerCase().includes('qualificação completa') ||\n        resposta.toLowerCase().includes('dados completos') ||\n        resposta.toLowerCase().includes('finalizar') ||\n        resposta.toLowerCase().includes('pronto para proposta')) {\n      informacoes.qualificacao_completa = true;\n      informacoes.dados_completos = true;\n      informacoes.proxima_acao = 'finalizar';\n    }\n    \n    // Verificar se precisa de mais informações\n    if (resposta.toLowerCase().includes('preciso saber') ||\n        resposta.toLowerCase().includes('pode me informar') ||\n        resposta.toLowerCase().includes('qual é')) {\n      informacoes.proxima_acao = 'continuar';\n    }\n    \n  } catch (error) {\n    console.error('Erro ao processar resposta OpenAI (loop):', error);\n    informacoes.mensagem_mariana_loop = 'Desculpe, houve um problema. Pode repetir sua resposta?';\n    informacoes.proxima_acao = 'continuar';\n  }\n  \n  return informacoes;\n}\n\nconst informacoes = extrairInformacoesLoop(respostaOpenAI);\n\n// Combinar dados originais com informações extraídas\nconst resultado = {\n  ...dados,\n  resposta_openai_loop: respostaOpenAI,\n  mensagem_mariana_loop: informacoes.mensagem_mariana_loop,\n  dados_completos: informacoes.dados_completos,\n  qualificacao_completa: informacoes.qualificacao_completa,\n  total_interacoes: informacoes.total_interacoes,\n  dados_qualificacao: informacoes.dados_qualificacao,\n  proxima_acao: informacoes.proxima_acao,\n  timestamp_loop: new Date().toISOString()\n};\n\nreturn [resultado];"
      },
      "id": "592c4712-90f9-4406-8e3c-2cbec840807b",
      "name": "Processar Resposta OpenAI (loop)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5088,
        -576
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.qualificacao_completa}}",
              "value2": true
            }
          ],
          "number": [
            {
              "value1": "={{$json.total_interacoes || 0}}",
              "operation": "largerEqual",
              "value2": 8
            }
          ]
        },
        "options": {"continueOnFail": true}
      },
      "id": "f985bfd6-254b-4c02-9aaf-70ef180cbe29",
      "name": "Condição de Parada Loop",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -4864,
        -576
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://automacao-abmix-evolution-api.2ckrtx.easypanel.host/message/sendText/Bradesco",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "C52FDF6831B2-439F-9F6A-C9E68962A705"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ '55' + String(($json[\"Telefone com DDD\"] || $json.telefone_limpo || $json.telefone || '').replace(/\\D/g,'')).replace(/^55/,'') }}"
            },
            {
              "name": "text",
              "value": "={{ $json.mensagem_mariana || $json.mensagem_mariana_loop || 'Mensagem de teste' }}"
            }
          ]
        },
        "options": {"continueOnFail": true}
      },
      "id": "b21dc154-8b30-4465-b8c0-86f08748a5aa",
      "name": "WhatsApp Enviar Mariana (continuação)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -4640,
        -480
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const it = $input.all();\n  if (!it.length) return [];\n  const src = it[0].json || {};\n  let base = src;\n  try {\n    const h = src.cabecalhos || src.cabeçalhos;\n    base = h ? JSON.parse(h) : (src.body ?? src);\n    if (typeof base === 'string') base = JSON.parse(base);\n  } catch {}\n  const d = base || {};\n\n  // payload mínimo: pelo menos um dos campos-chave\n  const ok = Boolean(\n    (d.telefone && /\\d/.test(String(d.telefone))) ||\n    d['Telefone com DDD'] || d.email || d.nome || d.cidade || d.estado\n  );\n  if (!ok) return [];\n\n  const cleanPhone = t => {\n    if (!t) return '';\n    const s = String(t).replace(/\\D/g,'').slice(-11);\n    return (s.length>=10 && s.length<=11) ? s : '';\n  };\n  const calcAge = v => {\n    if (!v) return '';\n    let dt;\n    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(String(v))) {\n      const [dd,mm,yy] = String(v).split('/').map(n=>parseInt(n,10));\n      dt = new Date(yy, mm-1, dd);\n    } else dt = new Date(v);\n    if (isNaN(dt.getTime())) return '';\n    const now=new Date();\n    let a=now.getFullYear()-dt.getFullYear();\n    const m=now.getMonth()-dt.getMonth();\n    if (m<0 || (m===0 && now.getDate()<dt.getDate())) a--;\n    return a>0 ? String(a) : '';\n  };\n  const validEmail = e => {\n    if (!e) return '';\n    const re=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return re.test(String(e).trim()) ? String(e).trim() : '';\n  };\n  const bucket = raw => {\n    if (raw>=70) return {c:'Alta', s:80};\n    if (raw>=50) return {c:'Média', s:60};\n    if (raw>=30) return {c:'Baixa', s:40};\n    return {c:'Muito Baixa', s:20};\n  };\n  const score = dd => {\n    let s=0;\n    if (dd.nome && String(dd.nome).trim().length>2) s+=20;\n    if (dd.email && validEmail(dd.email)) s+=20;\n    if ((dd.telefone && cleanPhone(dd.telefone)) || (dd.telefone_limpo && cleanPhone(dd.telefone_limpo))) s+=20;\n    if (dd.estado && String(dd.estado).trim().length>1) s+=10;\n    if (dd.cidade && String(dd.cidade).trim().length>1) s+=10;\n    const tv = parseInt(dd.total_vidas ?? dd.vidas ?? 0,10) || 0;\n    if (tv>0) s+=10;\n    if (dd.mensagem && String(dd.mensagem).trim().length>10) s+=10;\n    const idade = parseInt(dd.idade_titular ?? dd.idade ?? 0,10) || 0;\n    if (idade>=60 && idade<=68) s-=15; else if (idade>=69) s-=35;\n    const pre = String(dd.tem_preexistencia||'').toLowerCase();\n    if (pre.startsWith('sim')) s-=20;\n    const gr = String(dd.doenca_grave||'').toLowerCase();\n    if (gr.startsWith('sim')) s-=35;\n    if (tv>0 && tv<3) s-=15;\n    const tipo = String(dd.tipo_contratacao||'').toLowerCase();\n    if ((tipo.includes('empres') || tipo.includes('mei')) && tv>0 && tv<3) s-=10;\n    const cnpj = parseInt(dd.cnpj_meses_ativo||0,10)||0;\n    if ((tipo.includes('empres') || tipo.includes('mei')) && cnpj>0 && cnpj<6) s-=25;\n    const plano = String(dd.plano_atual||'').trim();\n    const tpm = parseInt(dd.tempo_plano_atual_meses||0,10)||0;\n    if (!plano || ['nao possui','não possui'].includes(plano.toLowerCase())) s+=10;\n    else if (tpm>=24) s+=15;\n    const sb = Math.max(0, Math.min(100, s));\n    const b = bucket(sb);\n    return {sb, s:b.s, c:b.c};\n  };\n\n  const telefone_limpo = cleanPhone(d.telefone || d.from || d['Telefone com DDD']);\n  const idade = calcAge(d.nascimento);\n  const email = validEmail(d.email);\n  const sc = score(d);\n\n  const out = {\n    ...d,\n    lead_id: d.lead_id || ('lead_'+Date.now()+'_'+Math.random().toString(36).slice(2,11)),\n    nome: String(d.nome||'').trim(),\n    email,\n    telefone: String(d.telefone || d['Telefone com DDD'] || ''),\n    telefone_limpo,\n    nascimento: String(d.nascimento||''),\n    estado: String(d.estado||'').trim(),\n    cidade: String(d.cidade||'').trim(),\n    vidas: parseInt(d.vidas,10) || 1,\n    total_vidas: parseInt(d.total_vidas ?? d.vidas ?? 0,10) || (parseInt(d.vidas,10)||1),\n    mensagem: String(d.mensagem||'').trim(),\n    timestamp: d.timestamp || new Date().toISOString(),\n    idade,\n    idade_titular: idade,\n    cnpj_meses_ativo: d.cnpj_meses_ativo||'',\n    tempo_plano_atual_meses: d.tempo_plano_atual_meses||'',\n    tipo_contratacao: d.tipo_contratacao || d.tipo || '',\n    tem_preexistencia: d.tem_preexistencia||'',\n    doenca_grave: d.doenca_grave||'',\n    plano_atual: d.plano_atual||'',\n    status: d.status || 'Novo - Aguardando IA',\n    classificacao: sc.c,\n    classificacao_inicial: d.classificacao_inicial ?? sc.c,\n    score_bruto: sc.sb,\n    score: sc.s,\n    score_inicial: d.score_inicial ?? sc.s,\n    remarketing_data: d.remarketing_data || '',\n    telefone_valido: Boolean(telefone_limpo),\n    telefone_invalido: !telefone_limpo,\n    dados_validos: Boolean(telefone_limpo && String(d.nome||'').trim().length>2)\n  };\n\n  return [{ json: out }];\n} catch (err) {\n  return [];\n}"
      },
      "id": "d3e3475e-dea1-4d93-9601-312d01a3ee45",
      "name": "Processar Dados Iniciais",
      "type": "n8n-nodes-base.code",
      "position": [
        -7152,
        -1280
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "sendTo": "contato@abmixcorretora.com.br",
        "subject": "🔔 Novo Lead #{{$json.lead_id}} - {{$json.nome}}",
        "message": "<table border=\"1\" style=\"border-collapse:collapse\">\n<tr><td><b>ID</b></td><td>{{$json.lead_id}}</td></tr>\n<tr><td><b>Nome</b></td><td>{{$json.nome}}</td></tr>\n<tr><td><b>Telefone</b></td><td>{{$json.telefone_limpo}}</td></tr>\n<tr><td><b>Email</b></td><td>{{$json.email}}</td></tr>\n<tr><td><b>Cidade/UF</b></td><td>{{$json.cidade}}/{{$json.estado}}</td></tr>\n<tr><td><b>Vidas</b></td><td>{{$json.vidas}}</td></tr>\n<tr><td><b>Mensagem</b></td><td>{{$json.mensagem}}</td></tr>\n<tr><td><b>Classificação</b></td><td>{{$json.classificacao_inicial}} ({{$json.score_inicial}})</td></tr>\n</table>",
        "options": {"continueOnFail": true}
      },
      "id": "60864b89-bfe9-44b4-9855-91e33328f937",
      "name": "Email Controle Interno",
      "type": "n8n-nodes-base.gmail",
      "position": [
        -7552,
        -64
      ],
      "typeVersion": 2,
      "webhookId": "a4c2272c-eeef-4aaf-bb20-daa4f18cc84e",
      "credentials": {
        "gmailOAuth2": {
          "id": "gmail-credentials",
          "name": "Gmail OAuth2"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://automacao-abmix-evolution-api.2ckrtx.easypanel.host/message/sendText/Bradesco",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "C52FDF6831B2-439F-9F6A-C9E68962A705"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ '55' + String(($json[\"Telefone com DDD\"] || $json.telefone_limpo || $json.telefone || '').replace(/\\D/g,'')).replace(/^55/,'') }}"
            },
            {
              "name": "text",
              "value": "Olá Dr(a). {{$json.nome}}!\n\nSou a Mariana, consultora especialista Bradesco Saúde.\n\nRecebi sua solicitação! 😊\n\nVou fazer algumas perguntinhas rápidas para conseguir as melhores opções.\n\nEnquanto isso, se tiver alguma dúvida específica, fique à vontade para perguntar.\n\n— Mariana · Bradesco Saúde"
            }
          ]
        },
        "options": {"continueOnFail": true}
      },
      "id": "f18141fd-1f5c-4372-9a27-8f6e1e4e092c",
      "name": "WhatsApp Resposta Inicial",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -7552,
        -1728
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://automacao-abmix-evolution-api.2ckrtx.easypanel.host/message/sendPresence/Bradesco",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "C52FDF6831B2-439F-9F6A-C9E68962A705"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ '55' + String(($json[\"Telefone com DDD\"] || $json.telefone_limpo || $json.telefone || '').replace(/\\D/g,'')).replace(/^55/,'') }}"
            },
            {
              "name": "presence",
              "value": "composing"
            }
          ]
        },
        "options": {"continueOnFail": true}
      },
      "id": "4da1f446-cada-49d5-9b66-dc089a1d50d7",
      "name": "Status Digitando ON",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -7104,
        -1728
      ],
      "typeVersion": 4
    },
    {
      "parameters": {
        "jsCode": "const dados = $input.all()[0].json;\n\nconst promptMariana = `Você é a Mariana, consultora especialista Bradesco Saúde com 10 anos de experiência.\n\nCOMPORTAMENTO:\n\nProfissional, cordial, humanizada, calorosa e empática.\n\nSempre pareça humana: reconheça o que o cliente diz, agradeça, adapte o tom.\n\nUse emojis com moderação (😊 ✅ 📌 💙).\n\nAdapte a saudação conforme horário (bom dia/tarde/noite).\n\nTrate médicos como \"Dr(a).\".\n\nAssine sempre: — Mariana · Bradesco Saúde.\n\nAo perguntar sobre doenças, seja sempre discreta e empática. Use uma frase como: \"Para que a cotação seja precisa, preciso confirmar se há alguma condição de saúde preexistente que precise de atenção especial no plano.\"\n\nSe o cliente pedir para falar com humano, finalize com acolhimento e sinalize o encaminhamento imediato.\n\nSe o cliente demonstrar urgência, seja objetiva e direta; se demonstrar insegurança, reforce acolhimento e segurança.\n\nResponda no mesmo idioma do cliente (padrão: PT-BR).\n\nObjetivo principal: coletar todas as informações necessárias de forma completa, clara e humanizada, para ao final encaminhar o cliente a um representante comercial sênior da Bradesco, que terá autonomia para personalizar a proposta.\n\nAo abordar pré-existências e doenças graves, ser sempre extremamente delicada, acolhedora e humanizada, reforçando que a pergunta é apenas para garantir precisão e cuidado no plano.\n\nPLANOS BRADESCO (referência de posicionamento, não prometa valores):\n\nEfetivo: Básico, rede essencial\n\nFlex: Intermediário, rede ampliada\n\nIdeal: Digital, rede completa\n\nNacional: Cobertura Brasil todo\n\nNacional Plus: Premium com Einstein/Sírio\n\nPremium: Top com Copa Star/Samaritano\n\nREDE HOSPITALAR SÃO PAULO (resumo):\n\nEfetivo: Beneficência Portuguesa\n\nFlex: + Santa Paula, São Camilo\n\nIdeal: + 9 de Julho, Santa Joana\n\nNacional: + Oswaldo Cruz, Santa Catarina\n\nNacional Plus: + Einstein, Sírio-Libanês\n\nPremium: + Copa Star, Samaritano, Vila Nova Star\n\nHOSPITAIS RIO DE JANEIRO (resumo):\n\nCopa D'Or, Quinta D'Or (Nacional Plus/Premium)\n\nSamaritano, Barra D'Or (Nacional/Ideal)\n\nCasa de Saúde São José (Flex)\n\nCARÊNCIAS (informativas; não garanta exceções):\n\nUrgência/Emergência: 24 horas\n\nConsultas: 30 dias\n\nExames simples: 30 dias\n\nExames complexos: 180 dias\n\nInternações: 180 dias\n\nParto: 300 dias\n\nDoenças preexistentes: 24 meses\n\nREGRAS PRINCIPAIS:\n\nMínimo 3 vidas\n\nCNPJ/MEI ativo 6+ meses\n\nIdade limite 59 anos (acima disso, análise especial)\n\nRN até 30 dias sem carência (conforme regras)\n\nDADOS JÁ COLETADOS (NUNCA PERGUNTE NOVAMENTE):\n\nNome: ${dados.nome || 'Não informado'}\n\nIdade titular: ${dados.idade_titular || dados.idade || 'Não informado'}\n\nTelefone: ${dados.telefone || 'Não informado'}\n\nEmail: ${dados.email || 'Não informado'}\n\nLocal: ${dados.cidade || ''}/${dados.estado || ''}\n\nTotal de vidas (grupo): ${dados.vidas || 1}\n\nIdades dependentes: ${dados.idades_dependentes || 'Não informado'}\n\nMensagem inicial: ${dados.mensagem || 'Não informado'}\n\nINSTRUÇÕES IMPORTANTES (SIGA À RISCA):\n\nPRIORIDADE MÁXIMA: Leia a seção \"DADOS JÁ COLETADOS\". NÃO repita ou replique perguntas que já foram respondidas. Trabalhe APENAS no que falta.\n\nPORTABILIDADE/CARÊNCIAS: Se o cliente citar portabilidade ou carências:\n\nMarque \"eh_portabilidade\": true no JSON.\n\nEnvie uma resposta curta e útil com o link oficial: https://bradescomedicos.com.br/portabilidade-carencias\n\nCONTINUE a qualificação normalmente (colete os dados que faltam), explicando que isso ajuda a verificar elegibilidade e o melhor plano compatível.\n\nCOLETA DE DADOS (PREENCHA O QUE ESTÁ FALTANDO):\n\nCampos-alvo: idade_titular, total_vidas, tipo_contratacao (Empresarial/MEI/Familiar/Individual), idades_dependentes (se vidas > 1), hospital_preferencia, plano_atual, tem_preexistencia, doenca_grave, cnpj_meses_ativo (em meses) e tempo_plano_atual_meses (em meses).\n\nDependentes: se total_vidas > 1 e não houver idades, peça as IDADES de cada dependente (ex.: \"34, 12, 8\").\n\nEmpresa/MEI: se for CNPJ/MEI, pergunte sobre outros titulares/sócios/funcionários e as idades deles, caso relevante. Pergunte também há quanto tempo o CNPJ/MEI está ativo (em meses) e registre em cnpj_meses_ativo.\n\nPlano atual: se houver, pergunte há quantos meses mantém o plano atual e registre em tempo_plano_atual_meses. Se não tiver, registre plano_atual = 'Não possui' e deixe tempo_plano_atual_meses em branco.\n\nPreexistências: confirme com tato se há condição de saúde preexistente; se mencionar algo grave (ex.: câncer, diálise, transplante), marque \"doenca_grave\": \"sim\". Sempre com acolhimento, reforçando cuidado.\n\nFaça NO MÁXIMO 2 perguntas por vez.\n\nNÃO invente dados; se houver conflito entre informações do cliente e as já coletadas, peça confirmação de forma breve.\n\nOBJETIVO PRINCIPAL: Coletar os dados para encaminhar ao representante SÊNIOR que fará os levantamentos de valores e personalização.\n\nAo concluir, diga: \"Perfeito! Tenho tudo que preciso. Vou encaminhar você agora para nosso representante comercial sênior.\"\n\nSe perguntarem \"por quê sênior?\": \"Porque tem maior autonomia para personalizar a proposta e buscar as melhores condições para o seu perfil.\"\n\nCRITÉRIO DE CONCLUSÃO:\n\nMarque \"qualificacao_completa\": true apenas quando tiver, no mínimo: idade_titular, total_vidas e tipo_contratacao.\n\nSe total_vidas > 1, preferencialmente colete \"idades_dependentes\" antes de concluir.\n\nDUVIDAS BUSQUE INFORMAÇÕES OFICIAIS NO SITE DA BRADESCO SAÚDE :@https://bradescomedicos.com.br\n\nESTILO DE RESPOSTA:\n\nMensagens curtas, claras e acolhedoras.\n\nEvite parágrafos longos. Use frases diretas, com 1–2 perguntas por envio.\n\nNunca envie informações sigilosas; não prometa prazos ou preços.\n\nSAÍDA OBRIGATÓRIA:\n\nSEMPRE responda exatamente no formato abaixo. NADA antes ou depois. NENHUM outro texto fora das seções.\n\nMENSAGEM:\n[Sua mensagem natural e empática para o cliente, com no máximo duas perguntas objetivas]\n\nDADOS_EXTRAIDOS:\n{\n\"eh_portabilidade\": false,\n\"idade_titular\": \"${dados.idade_titular || dados.idade || ''}\",\n\"total_vidas\": \"${dados.vidas || '1'}\",\n\"idades_dependentes\": \"${dados.idades_dependentes || ''}\",\n\"outros_titulares\": \"\",\n\"idades_outros_titulares\": \"\",\n\"tipo_contratacao\": \"${dados.tipo_contratacao || ''}\",\n\"cnpj_meses_ativo\": \"${dados.cnpj_meses_ativo || ''}\",\n\"hospital_preferencia\": \"${dados.hospital_preferencia || ''}\",\n\"plano_atual\": \"${dados.plano_atual || ''}\",\n\"tempo_plano_atual_meses\": \"${dados.tempo_plano_atual_meses || ''}\",\n\"tem_preexistencia\": \"${dados.tem_preexistencia || ''}\",\n\"doenca_grave\": \"${dados.doenca_grave || ''}\",\n\"qualificacao_completa\": false\n}`;\n\nreturn [{\n  ...dados,\n  prompt_mariana: promptMariana\n}];"
      },
      "id": "d82d64a3-65d3-492b-b754-f96129a8a11e",
      "name": "Preparar Prompt Mariana",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6880,
        -1728
      ]
    },
    {
      "parameters": {
        "jsCode": "const entrada = ($input.all()[0]?.json) ?? {};\nconst resposta = entrada.message?.content ?? entrada.choices?.[0]?.message?.content ?? entrada.content ?? entrada.text ?? '';\n\nfunction extrair(res){\n  const r = {\n    mensagem_mariana_loop: 'Desculpe, não entendi. Pode repetir?',\n    qualificacao_completa: false,\n    proxima_acao: 'continuar',\n    dados_qualificacao: entrada.dados_qualificacao || {}\n  };\n  try{\n    const mJSON = res.match(/DADOS_EXTRAIDOS:\\s*(\\{[\\s\\S]*\\})/i);\n    if (mJSON?.[1]) { try {\n      const p = JSON.parse(mJSON[1]);\n      for (const k of Object.keys(p)) if (p[k] !== undefined && String(p[k]).trim()!=='') r.dados_qualificacao[k]=p[k];\n    } catch{} }\n    const mMSG = res.match(/MENSAGEM:\\s*([\\s\\S]*?)(?=DADOS_EXTRAIDOS:|$)/i);\n    r.mensagem_mariana_loop = mMSG?.[1]?.trim() || res.replace(/\\{[\\s\\S]*\\}/,'').trim();\n    const dq=r.dados_qualificacao, obrig=['idade_titular','total_vidas','tipo_contratacao'];\n    const ok=obrig.filter(c=>dq[c] && String(dq[c]).trim()!=='');\n    if (ok.length>=3 || dq.qualificacao_completa===true) { r.qualificacao_completa=true; r.proxima_acao='finalizar'; }\n  }catch{}\n  return r;\n}\n\nconst info = extrair(resposta);\nconst saida = {\n  ...entrada,\n  resposta_openai_loop: resposta,\n  mensagem_mariana_loop: info.mensagem_mariana_loop,\n  dados_completos: info.qualificacao_completa,\n  qualificacao_completa: info.qualificacao_completa,\n  total_interacoes: (entrada.total_interacoes||0)+1,\n  dados_qualificacao: info.dados_qualificacao,\n  proxima_acao: info.proxima_acao,\n  timestamp_loop: new Date().toISOString()\n};\nreturn [{ json: saida }];"
      },
      "id": "6e9b069d-33fb-47f0-9a28-18e3b377f171",
      "name": "Processar Resposta OpenAI",
      "type": "n8n-nodes-base.code",
      "position": [
        -6432,
        -1728
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.eh_portabilidade}}",
              "value2": true
            }
          ]
        }
      },
      "id": "d150c08a-dbe6-472a-a403-c3ff7e512598",
      "name": "É Portabilidade?",
      "type": "n8n-nodes-base.if",
      "position": [
        -6208,
        -1728
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://automacao-abmix-evolution-api.2ckrtx.easypanel.host/message/sendPresence/Bradesco",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "C52FDF6831B2-439F-9F6A-C9E68962A705"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ '55' + String(($json[\"Telefone com DDD\"] || $json.telefone_limpo || $json.telefone || '').replace(/\\D/g,'')).replace(/^55/,'') }}"
            },
            {
              "name": "presence",
              "value": "paused"
            }
          ]
        },
        "options": {"continueOnFail": true}
      },
      "id": "44969ecc-1256-42fd-995e-605a9eddd447",
      "name": "Status Digitando OFF",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -5536,
        -1728
      ],
      "typeVersion": 4
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://automacao-abmix-evolution-api.2ckrtx.easypanel.host/message/sendPresence/Bradesco",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "C52FDF6831B2-439F-9F6A-C9E68962A705"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ '55' + String(($json[\"Telefone com DDD\"] || $json.telefone_limpo || $json.telefone || '').replace(/\\D/g,'')).replace(/^55/,'') }}"
            },
            {
              "name": "presence",
              "value": "composing"
            }
          ]
        },
        "options": {"continueOnFail": true}
      },
      "id": "status-digitando-pos-openai-001",
      "name": "Status Digitando Pós-OpenAI",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -5200,
        -1500
      ],
      "typeVersion": 4
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://automacao-abmix-evolution-api.2ckrtx.easypanel.host/message/sendText/Bradesco",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "C52FDF6831B2-439F-9F6A-C9E68962A705"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ '55' + String(($json[\"Telefone com DDD\"] || $json.telefone_limpo || $json.telefone || '').replace(/\\D/g,'')).replace(/^55/,'') }}"
            },
            {
              "name": "text",
              "value": "={{$json.mensagem_mariana}}"
            }
          ]
        },
        "options": {"continueOnFail": true}
      },
      "id": "f1c51878-5560-4e64-bbfb-13bcaaddd059",
      "name": "WhatsApp Enviar Mariana",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -5312,
        -1728
      ],
      "typeVersion": 4
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://automacao-abmix-evolution-api.2ckrtx.easypanel.host/message/sendText/Bradesco",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "C52FDF6831B2-439F-9F6A-C9E68962A705"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ '55' + String(($json[\"Telefone com DDD\"] || $json.telefone_limpo || $json.telefone || '').replace(/\\D/g,'')).replace(/^55/,'') }}"
            },
            {
              "name": "text",
              "value": "Olá! 😊 Sobre PORTABILIDADE:\n\nVocê pode pedir a portabilidade sem novas carências se cumprir as regras da ANS.\n\n📋 **Condições para Portabilidade:**\n• Prazo de até 60 dias após perda do vínculo\n• Válido para demissão, aposentadoria ou cancelamento\n• Necessário ter novo vínculo empregatício ou contrato individual\n\n🔗 **Canal Oficial Bradesco:**\nhttps://bradescomedicos.com.br/portabilidade-carencias\n\nSe quiser, te ajudo a conferir a elegibilidade agora e conhecer nossos planos!\n\n— Mariana · Bradesco Saúde"
            }
          ]
        },
        "options": {"continueOnFail": true}
      },
      "id": "753cd52c-60ff-4159-9820-785f41db4950",
      "name": "Enviar Link Portabilidade",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -5984,
        -1792
      ],
      "typeVersion": 4
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "whatsapp-webhook-evolution",
        "authentication": "none",
        "responseMode": "lastNode",
        "responseData": "lastNode",
        "responseCode": 200,
        "responseBody": "{\"ok\": true}",
        "options": {"continueOnFail": true}
      },
      "id": "3f24d964-8568-478d-9fd1-d19663e6d78e",
      "name": "Webhook Resposta Cliente WhatsApp",
      "type": "n8n-nodes-base.webhook",
      "position": [
        -7776,
        -672
      ],
      "typeVersion": 2.1,
      "webhookId": "resposta-cliente-whatsapp"
    },
    {
      "parameters": {
        "jsCode": "const dados = $input.all()[0].json;\n\n// Função para processar resposta do cliente\nfunction processarRespostaCliente(dados) {\n  try {\n    const respostaCliente = dados.texto_cliente || dados.resposta_cliente || dados.mensagem || '';\n\n    // Limpa telefone\n    function limparTelefone(telefone) {\n      if (!telefone) return '';\n      const limpo = telefone.toString().replace(/\\D/g, '');\n      return (limpo.length >= 10 && limpo.length <= 11) ? limpo : '';\n    }\n\n    let out = {\n      ...dados,\n  resposta_cliente: respostaCliente,\n      texto_cliente: respostaCliente,\n      timestamp_resposta: new Date().toISOString(),\n      tipo_resposta: 'texto',\n      precisa_transcrever: false,   // << importante\n    };\n\n    // Se vier áudio, marca pra transcrever\n    if (dados.audio_url || dados.audio_data) {\n      out.tipo_resposta = 'audio';\n      out.precisa_transcrever = true;     // << importante\n      out.audio_url = dados.audio_url || '';\n    }\n\n    // Extrações simples de texto\n    if (respostaCliente) {\n      const idade = respostaCliente.match(/(\\d+)\\s*anos?/i);\n      if (idade && !out.idade_titular) out.idade_titular = idade[1];\n\n      const vidas = respostaCliente.match(/(\\d+)\\s*(vidas?|pessoas?|dependentes?)/i);\n      if (vidas && !out.total_vidas) out.total_vidas = vidas[1];\n\n      // Extrair TODAS as idades mencionadas (titular + dependentes)\n      const todasIdades = respostaCliente.match(/\\d{1,3}\\s*anos/gi);\n      if (todasIdades && todasIdades.length > 1) {\n        out.idades_dependentes = todasIdades.slice(1).join(', ');\n      }\n\n      // Detectar múltiplos titulares\n      if (/titulares|sócios|funcionários/i.test(respostaCliente)) {\n        out.tem_multiplos_titulares = true;\n      }\n\n      // Detectar preexistência e doenças graves\n      if (/diabetes|hipertensão|câncer|cardíaco/i.test(respostaCliente)) {\n        out.tem_preexistencia = 'Sim';\n        if (/câncer|transplante|diálise/i.test(respostaCliente)) {\n          out.doenca_grave = 'Sim';\n        }\n      }\n\n      const txt = respostaCliente.toLowerCase();\n      if (txt.includes('empresarial') || txt.includes('empresa')) out.tipo_contratacao = 'Empresarial';\n      else if (txt.includes('familiar') || txt.includes('família')) out.tipo_contratacao = 'Familiar';\n    }\n\n    // telefone\n    if (dados.telefone) {\n      const t = limparTelefone(dados.telefone);\n      out.telefone_limpo = t;\n      out.telefone_valido = !!t;\n    }\n\n    return out;\n\n  } catch (error) {\n    return {\n      ...dados,\n  resposta_cliente: dados.texto_cliente || '',\n      texto_cliente: dados.texto_cliente || '',\n      timestamp_resposta: new Date().toISOString(),\n      tipo_resposta: 'texto',\n      erro_processamento: error.message,\n      status: 'Erro no processamento'\n    };\n  }\n}\n\nreturn [processarRespostaCliente(dados)];"
      },
      "id": "c6d1e030-85c0-4500-9ddd-1b9c63e14b8a",
      "name": "Processar Resposta Cliente",
      "type": "n8n-nodes-base.code",
      "position": [
        -7552,
        -672
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.precisa_transcrever}}",
              "value2": true
            }
          ]
        }
      },
      "id": "6dfa939f-5a39-46ab-b684-872aa979b62a",
      "name": "É Áudio?",
      "type": "n8n-nodes-base.if",
      "position": [
        -7104,
        -672
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.telefone_invalido}}",
              "value2": true
            }
          ]
        }
      },
      "id": "b6328622-7bad-4c5d-a6ce-dbbc3063cdb9",
      "name": "Telefone Válido? (Webhook)",
      "type": "n8n-nodes-base.if",
      "position": [
        -7328,
        -672
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://automacao-abmix-evolution-api.2ckrtx.easypanel.host/message/sendText/Bradesco",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "C52FDF6831B2-439F-9F6A-C9E68962A705"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ '55' + String(($json[\"Telefone com DDD\"] || $json.telefone_limpo || $json.telefone || '').replace(/\\D/g,'')).replace(/^55/,'') }}"
            },
            {
              "name": "text",
              "value": "🎧 Recebi seu áudio! Deixa eu ouvir com atenção..."
            }
          ]
        },
        "options": {"continueOnFail": true}
      },
      "id": "ad41b00b-f8f0-4497-8798-d803eac7461e",
      "name": "Confirmar Áudio Recebido",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -6880,
        -672
      ],
      "typeVersion": 4
    },
    {
      "parameters": {
        "url": "={{$json.audio_url}}",
        "options": {
          "response": {}
        }
      },
      "id": "fb59973c-485c-4e9c-9427-0fc3d08dadde",
      "name": "Baixar Áudio",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -6656,
        -672
      ],
      "typeVersion": 4
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "pass-through",
        "options": {"continueOnFail": true}
      },
      "id": "c49327cf-97fe-4246-b522-6a8048b3d031",
      "name": "Merge Respostas",
      "type": "n8n-nodes-base.merge",
      "position": [
        -6208,
        -672
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const dados = $input.all()[0].json;\n\n// Função para atualizar o contexto da conversa\nfunction atualizarContexto(dados) {\n  const contexto = {\n    ...dados,\n    dados_completos: false,\n    contexto_atualizado: true,\n    timestamp_contexto: new Date().toISOString()\n  };\n\n  // Helpers\n  function limparTelefone(telefone) {\n    if (!telefone) return '';\n    const limpo = telefone.toString().replace(/\\D/g, '');\n    return (limpo.length >= 10 && limpo.length <= 11) ? limpo : '';\n  }\n\n  function calcularScore(d) {\n    let score = 0;\n    if (d.nome && d.nome.length > 2) score += 20;\n    if (d.telefone && limparTelefone(d.telefone)) score += 20;\n    if (d.email && d.email.includes('@')) score += 15;\n    const idade = parseInt(d.idade_titular || d.idade || 0, 10) || 0;\n    if (idade > 0) score += 15;\n    const totalVidas = parseInt(d.total_vidas || d.vidas || 0, 10) || 0;\n    if (totalVidas > 0) score += 10;\n    if (d.tipo_contratacao && d.tipo_contratacao !== 'Individual') score += 10;\n    if (d.hospital_preferencia && d.hospital_preferencia !== 'Não informado') score += 5;\n    if (d.plano_atual && d.plano_atual !== 'Não possui') score += 5;\n\n    if (idade >= 60 && idade <= 68) score -= 15;\n    else if (idade >= 69) score -= 35;\n    if (totalVidas > 0 && totalVidas < 3) score -= 15;\n    const tipo = String(d.tipo_contratacao || '').toLowerCase();\n    if ((tipo.includes('empres') || tipo.includes('mei')) && totalVidas > 0 && totalVidas < 3) score -= 10;\n    const cnpjMeses = parseInt(d.cnpj_meses_ativo || 0, 10) || 0;\n    if ((tipo.includes('empres') || tipo.includes('mei')) && cnpjMeses > 0 && cnpjMeses < 6) score -= 25;\n    const pre = String(d.tem_preexistencia || '').toLowerCase();\n    if (pre.startsWith('sim')) score -= 20;\n    const grave = String(d.doenca_grave || '').toLowerCase();\n    if (grave.startsWith('sim')) score -= 35;\n    const tempoPlano = parseInt(d.tempo_plano_atual_meses || 0, 10) || 0;\n    if (!d.plano_atual || ['não possui','nao possui'].includes(String(d.plano_atual).toLowerCase())) score += 10;\n    else if (tempoPlano >= 24) score += 15;\n\n    const bruto = Math.max(0, Math.min(100, score));\n    let classificacao = 'Muito Baixa';\n    let bucket = 20;\n    if (bruto >= 70) { classificacao = 'Alta'; bucket = 80; }\n    else if (bruto >= 50) { classificacao = 'Média'; bucket = 60; }\n    else if (bruto >= 30) { classificacao = 'Baixa'; bucket = 40; }\n    return { score_bruto: bruto, score: bucket, classificacao };\n  }\n\n  try {\n    const respostaCliente = dados.resposta_cliente || dados.texto_cliente || '';\n    if (respostaCliente) {\n      const idadeMatch = respostaCliente.match(/(\\d+)\\s*anos?/i);\n      if (idadeMatch && !contexto.idade_titular) contexto.idade_titular = idadeMatch[1];\n      const vidasMatch = respostaCliente.match(/(\\d+)\\s*(vidas?|pessoas?|dependentes?)/i);\n      if (vidasMatch && !contexto.total_vidas) contexto.total_vidas = vidasMatch[1];\n      const todasIdades = respostaCliente.match(/\\d{1,3}\\s*anos/gi);\n      if (todasIdades && todasIdades.length > 1) { contexto.idades_dependentes = todasIdades.slice(1).join(', '); }\n      if (/titulares|sócios|funcionários/i.test(respostaCliente)) { contexto.tem_multiplos_titulares = true; }\n      if (/diabetes|hipertensão|câncer|cardíaco/i.test(respostaCliente)) {\n        contexto.tem_preexistencia = 'Sim';\n        if (/câncer|transplante|diálise/i.test(respostaCliente)) { contexto.doenca_grave = 'Sim'; }\n      }\n      const txt = respostaCliente.toLowerCase();\n      if (txt.includes('empresarial') || txt.includes('empresa')) contexto.tipo_contratacao = 'Empresarial';\n      else if (txt.includes('familiar') || txt.includes('família')) contexto.tipo_contratacao = 'Familiar';\n    }\n\n    if (dados.telefone) {\n      const t = limparTelefone(dados.telefone);\n      contexto.telefone_limpo = t;\n      contexto.telefone_valido = !!t;\n    }\n\n    const camposObrigatorios = ['idade_titular', 'total_vidas', 'tipo_contratacao'];\n    const camposPresentes = camposObrigatorios.filter(campo => contexto[campo] && contexto[campo].toString().trim() !== '');\n    if (camposPresentes.length >= 2) { contexto.dados_completos = true; }\n\n    const bucket = calcularScore(contexto);\n    contexto.score_bruto = bucket.score_bruto;\n    contexto.score = bucket.score;\n    contexto.classificacao = bucket.classificacao;\n\n  } catch (error) {\n    console.error('Erro ao atualizar contexto:', error);\n  }\n\n  return contexto;\n}\n\nconst contextoAtualizado = atualizarContexto(dados);\n\nreturn [contextoAtualizado];"
      },
      "id": "178ce193-379a-4634-b5e9-333ba8afae8b",
      "name": "Atualizar Contexto Conversa",
      "type": "n8n-nodes-base.code",
      "position": [
        -5984,
        -576
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.dados_completos}}",
              "value2": true
            }
          ]
        }
      },
      "id": "b8982248-92b1-49d5-9194-47f334a68155",
      "name": "Dados Completos?",
      "type": "n8n-nodes-base.if",
      "position": [
        -5760,
        -576
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\"ok\": true}",
        "options": {
          "responseCode": 200
        }
      },
      "id": "fcb5db32-5e7d-46a2-8eca-3876a876ad4c",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        -6800,
        -1232
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\"ok\": true}",
        "options": {"continueOnFail": true}
      },
      "id": "8a691ee4-032d-4424-9f45-5480915a2d14",
      "name": "Responder Webhook Cliente",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        -6208,
        -288
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.telefone_invalido}}",
              "value2": false
            }
          ]
        }
      },
      "id": "16700b8c-cf44-4788-ab3a-667e49b82080",
      "name": "Telefone Válido? (Inicial)",
      "type": "n8n-nodes-base.if",
      "position": [
        -7776,
        -1728
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.telefone_invalido}}",
              "value2": true
            }
          ]
        }
      },
      "id": "a0126235-42f2-4bd6-9df2-ae47513c26e0",
      "name": "Telefone Válido? (Cliente)",
      "type": "n8n-nodes-base.if",
      "position": [
        -5312,
        -576
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.telefone_invalido}}",
              "value2": true
            }
          ]
        }
      },
      "id": "287d28ce-45d6-4872-907f-6c9187bc79f0",
      "name": "Telefone Válido? (Final)",
      "type": "n8n-nodes-base.if",
      "position": [
        -6208,
        -480
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "const dados = $input.all()[0].json;\n\n// Função para extrair e estruturar dados para o vendedor\nfunction prepararResumoVendedor(dados) {\n  const resumo = {\n    lead_id: dados.lead_id || '',\n    nome: dados.nome || '',\n    telefone: dados.telefone || '',\n    email: dados.email || '',\n    cidade_estado: `${dados.cidade || ''}/${dados.estado || ''}`.replace('//', '/'),\n    idade_titular: dados.idade_titular || dados.idade || '',\n    total_vidas: dados.total_vidas || dados.vidas || 1,\n    idades_dependentes: '',\n    tipo_contratacao: dados.tipo_contratacao || 'Individual',\n    hospital_preferencia: dados.hospital_preferencia || 'Não informado',\n    plano_atual: dados.plano_atual || 'Não possui',\n    tem_preexistencia: dados.tem_preexistencia || 'Não informado',\n    doenca_grave: dados.doenca_grave || 'Não informado',\n    cnpj_meses_ativo: dados.cnpj_meses_ativo || '',\n    tempo_plano_atual_meses: dados.tempo_plano_atual_meses || '',\n    classificacao: 'Média',\n    score: 50,\n    score_bruto: 0,\n    plano_sugerido: 'Bradesco Nacional',\n    documentos_necessarios: 'RG, CPF, Comprovante de Residência',\n    timestamp_qualificacao: new Date().toISOString()\n  };\n  \n  try {\n    if (dados.dados_qualificacao) {\n      const q = dados.dados_qualificacao;\n      if (q.idade_titular) resumo.idade_titular = q.idade_titular;\n      if (q.total_vidas) resumo.total_vidas = q.total_vidas;\n      if (q.idades_dependentes) resumo.idades_dependentes = q.idades_dependentes;\n      if (q.tipo_contratacao) resumo.tipo_contratacao = q.tipo_contratacao;\n      if (q.hospital_preferencia) resumo.hospital_preferencia = q.hospital_preferencia;\n      if (q.plano_atual) resumo.plano_atual = q.plano_atual;\n      if (q.tem_preexistencia) resumo.tem_preexistencia = q.tem_preexistencia;\n      if (q.doenca_grave) resumo.doenca_grave = q.doenca_grave;\n      if (q.cnpj_meses_ativo) resumo.cnpj_meses_ativo = q.cnpj_meses_ativo;\n      if (q.tempo_plano_atual_meses) resumo.tempo_plano_atual_meses = q.tempo_plano_atual_meses;\n    }\n    if (dados.dados_extraidos) {\n      const e = dados.dados_extraidos;\n      if (e.idade_titular) resumo.idade_titular = e.idade_titular;\n      if (e.total_vidas) resumo.total_vidas = e.total_vidas;\n      if (e.idades_dependentes) resumo.idades_dependentes = e.idades_dependentes;\n      if (e.tipo_contratacao) resumo.tipo_contratacao = e.tipo_contratacao;\n      if (e.hospital_preferencia) resumo.hospital_preferencia = e.hospital_preferencia;\n      if (e.plano_atual) resumo.plano_atual = e.plano_atual;\n      if (e.tem_preexistencia) resumo.tem_preexistencia = e.tem_preexistencia;\n      if (e.doenca_grave) resumo.doenca_grave = e.doenca_grave;\n      if (e.cnpj_meses_ativo) resumo.cnpj_meses_ativo = e.cnpj_meses_ativo;\n      if (e.tempo_plano_atual_meses) resumo.tempo_plano_atual_meses = e.tempo_plano_atual_meses;\n    }\n\n    function calcularScore(d) {\n      let score = 0;\n      if (resumo.nome && resumo.nome.length > 2) score += 15;\n      if (resumo.telefone && resumo.telefone.length > 10) score += 15;\n      if (resumo.email && resumo.email.includes('@')) score += 10;\n      const idade = parseInt(resumo.idade_titular || 0, 10) || 0;\n      if (idade > 0) score += 10;\n      const vidas = parseInt(resumo.total_vidas || 0, 10) || 0;\n      if (vidas > 0) score += 10;\n      if (resumo.tipo_contratacao && resumo.tipo_contratacao !== 'Individual') score += 10;\n      if (resumo.hospital_preferencia && resumo.hospital_preferencia !== 'Não informado') score += 10;\n      if (resumo.plano_atual && resumo.plano_atual !== 'Não possui') score += 10;\n\n      if (idade >= 60 && idade <= 68) score -= 15;\n      else if (idade >= 69) score -= 35;\n      if (vidas > 0 && vidas < 3) score -= 15;\n      const tipo = String(resumo.tipo_contratacao || '').toLowerCase();\n      if ((tipo.includes('empres') || tipo.includes('mei')) && vidas > 0 && vidas < 3) score -= 10;\n      const cnpjMeses = parseInt(resumo.cnpj_meses_ativo || 0, 10) || 0;\n      if ((tipo.includes('empres') || tipo.includes('mei')) && cnpjMeses > 0 && cnpjMeses < 6) score -= 25;\n      if (String(resumo.tem_preexistencia || '').toLowerCase().startsWith('sim')) score -= 20;\n      if (String(resumo.doenca_grave || '').toLowerCase().startsWith('sim')) score -= 35;\n      const tempoPlano = parseInt(resumo.tempo_plano_atual_meses || 0, 10) || 0;\n      if (!resumo.plano_atual || ['não possui','nao possui'].includes(String(resumo.plano_atual).toLowerCase())) score += 10;\n      else if (tempoPlano >= 24) score += 15;\n\n      const bruto = Math.max(0, Math.min(100, score));\n      let classificacao = 'Muito Baixa';\n      let bucket = 20;\n      if (bruto >= 70) { classificacao = 'Alta'; bucket = 80; }\n      else if (bruto >= 50) { classificacao = 'Média'; bucket = 60; }\n      else if (bruto >= 30) { classificacao = 'Baixa'; bucket = 40; }\n      return { score_bruto: bruto, score: bucket, classificacao };\n    }\n\n    const bucket = calcularScore(resumo);\n    resumo.score_bruto = bucket.score_bruto;\n    resumo.score = bucket.score;\n    resumo.classificacao = bucket.classificacao;\n\n    const idade = parseInt(resumo.idade_titular) || 0;\n    if (idade > 60) {\n      resumo.plano_sugerido = 'Bradesco Nacional 60+';\n    } else if (resumo.tipo_contratacao === 'Empresarial') {\n      resumo.plano_sugerido = 'Bradesco Empresarial';\n    } else if (parseInt(resumo.total_vidas) > 1) {\n      resumo.plano_sugerido = 'Bradesco Familiar';\n    } else {\n      resumo.plano_sugerido = 'Bradesco Nacional';\n    }\n\n    if (resumo.tipo_contratacao === 'Empresarial') {\n      resumo.documentos_necessarios = 'RG, CPF, Comprovante de Residência, Contrato Social, CNPJ';\n    } else if (parseInt(resumo.total_vidas) > 1) {\n      resumo.documentos_necessarios = 'RG, CPF, Comprovante de Residência, Documentos dos Dependentes';\n    } else {\n      resumo.documentos_necessarios = 'RG, CPF, Comprovante de Residência';\n    }\n\n  } catch (error) {\n    console.error('Erro ao preparar resumo vendedor:', error);\n  }\n  \n  return resumo;\n}\n\nconst resumoVendedor = prepararResumoVendedor(dados);\n\nconst mensagemVendedor = `🎯 NOVO LEAD QUALIFICADO - ${resumoVendedor.classificacao}\n\n👤 Cliente: ${resumoVendedor.nome}\n📞 Telefone: ${resumoVendedor.telefone}\n📧 Email: ${resumoVendedor.email}\n📍 Local: ${resumoVendedor.cidade_estado}\n\n📊 Informações:\n• Idade Titular: ${resumoVendedor.idade_titular} anos\n• Total de Vidas: ${resumoVendedor.total_vidas}\n• Tipo: ${resumoVendedor.tipo_contratacao}\n• Hospital Preferido: ${resumoVendedor.hospital_preferencia}\n• Plano Atual: ${resumoVendedor.plano_atual}\n• Preexistência: ${resumoVendedor.tem_preexistencia}\n\n💼 Recomendação:\n• Plano Sugerido: ${resumoVendedor.plano_sugerido}\n• Score: ${resumoVendedor.score}/100 (bruto: ${resumoVendedor.score_bruto})\n• Documentos: ${resumoVendedor.documentos_necessarios}\n\n⏰ Qualificado em: ${resumoVendedor.timestamp_qualificacao}`;\n\nreturn [{\n  ...dados,\n  resumo_vendedor: resumoVendedor,\n  mensagem_vendedor_formatada: mensagemVendedor\n}];"
      },
      "id": "2a8537f6-3178-4865-aecd-2f5fbbbeb8b7",
      "name": "Preparar Resumo Vendedor Completo",
      "type": "n8n-nodes-base.code",
      "position": [
        -4640,
        -672
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const dados = $input.all()[0].json;\n\n// Função para validar e garantir dados antes de enviar para planilha\nfunction validarDadosPlanilha(dados) {\n  const dadosValidados = {\n    ...dados,\n  dados_validados: true,\n    timestamp_validacao: new Date().toISOString()\n  };\n  \n  try {\n    // Garantir que resumo_vendedor existe e está completo\n    if (!dadosValidados.resumo_vendedor) {\n      dadosValidados.resumo_vendedor = {\n        lead_id: dadosValidados.lead_id || `lead_${Date.now()}`,\n        nome: dadosValidados.nome || 'Nome não informado',\n        telefone: dadosValidados.telefone || 'Telefone não informado',\n        email: dadosValidados.email || 'Email não informado',\n        cidade_estado: `${dadosValidados.cidade || 'Cidade'}/${dadosValidados.estado || 'Estado'}`,\n        idade_titular: dadosValidados.idade_titular || dadosValidados.idade || 'Idade não informada',\n        total_vidas: dadosValidados.total_vidas || dadosValidados.vidas || 1,\n        idades_dependentes: dadosValidados.idades_dependentes || 'Não informado',\n        tipo_contratacao: dadosValidados.tipo_contratacao || 'Individual',\n        hospital_preferencia: dadosValidados.hospital_preferencia || 'Não informado',\n        plano_atual: dadosValidados.plano_atual || 'Não possui',\n        tem_preexistencia: dadosValidados.tem_preexistencia || 'Não informado',\n        doenca_grave: dadosValidados.doenca_grave || 'Não informado',\n        classificacao: dadosValidados.classificacao || 'Média',\n        score: dadosValidados.score || 50,\n        plano_sugerido: dadosValidados.plano_sugerido || 'Bradesco Nacional',\n        documentos_necessarios: dadosValidados.documentos_necessarios || 'RG, CPF, Comprovante de Residência',\n        timestamp_qualificacao: new Date().toISOString()\n      };\n    }\n    \n    // Validar campos obrigatórios\n    const camposObrigatorios = ['lead_id', 'nome', 'telefone'];\n    const camposFaltantes = camposObrigatorios.filter(campo => \n      !dadosValidados.resumo_vendedor[campo] || dadosValidados.resumo_vendedor[campo].toString().trim() === ''\n    );\n    \n    if (camposFaltantes.length > 0) {\n      console.warn('Campos obrigatórios faltando:', camposFaltantes);\n      // Preencher campos faltantes com valores padrão\n      camposFaltantes.forEach(campo => {\n        if (campo === 'lead_id') {\n          dadosValidados.resumo_vendedor[campo] = `lead_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        } else if (campo === 'nome') {\n          dadosValidados.resumo_vendedor[campo] = 'Nome não informado';\n        } else if (campo === 'telefone') {\n          dadosValidados.resumo_vendedor[campo] = 'Telefone não informado';\n        }\n      });\n    }\n    \n    // Garantir que mensagem_vendedor_formatada existe\n    if (!dadosValidados.mensagem_vendedor_formatada) {\n      dadosValidados.mensagem_vendedor_formatada = `🎯 NOVO LEAD QUALIFICADO - ${dadosValidados.resumo_vendedor.classificacao}\\n\\n👤 Cliente: ${dadosValidados.resumo_vendedor.nome}\\n📞 Telefone: ${dadosValidados.resumo_vendedor.telefone}\\n📧 Email: ${dadosValidados.resumo_vendedor.email}\\n📍 Local: ${dadosValidados.resumo_vendedor.cidade_estado}\\n\\n📊 Informações:\\n• Idade Titular: ${dadosValidados.resumo_vendedor.idade_titular} anos\\n• Total de Vidas: ${dadosValidados.resumo_vendedor.total_vidas}\\n• Tipo: ${dadosValidados.resumo_vendedor.tipo_contratacao}\\n• Hospital Preferido: ${dadosValidados.resumo_vendedor.hospital_preferencia}\\n• Plano Atual: ${dadosValidados.resumo_vendedor.plano_atual}\\n• Preexistência: ${dadosValidados.resumo_vendedor.tem_preexistencia}\\n\\n💼 Recomendação:\\n• Plano Sugerido: ${dadosValidados.resumo_vendedor.plano_sugerido}\\n• Score: ${dadosValidados.resumo_vendedor.score}/100\\n• Documentos: ${dadosValidados.resumo_vendedor.documentos_necessarios}\\n\\n⏰ Qualificado em: ${dadosValidados.resumo_vendedor.timestamp_qualificacao}`;\n    }\n    \n    // Log dos dados validados para debug\n    console.log('Dados validados para planilha:', {\n      lead_id: dadosValidados.resumo_vendedor.lead_id,\n      nome: dadosValidados.resumo_vendedor.nome,\n      telefone: dadosValidados.resumo_vendedor.telefone,\n      email: dadosValidados.resumo_vendedor.email,\n      classificacao: dadosValidados.resumo_vendedor.classificacao,\n      score: dadosValidados.resumo_vendedor.score\n    });\n    \n  } catch (error) {\n    console.error('Erro na validação de dados:', error);\n    dadosValidados.erro_validacao = error.message;\n  }\n  \n  return dadosValidados;\n}\n\nconst dadosValidados = validarDadosPlanilha(dados);\n\nreturn [dadosValidados];"
      },
      "id": "c416ede5-d2f6-446d-aac8-35885501a15c",
      "name": "Validar Dados Antes Planilha",
      "type": "n8n-nodes-base.code",
      "position": [
        -4416,
        -672
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{ $json.vendedor_alvo }}",
        "rules": {
          "rules": [
            {
              "condition": "equal",
              "value2": "Fabiana",
              "output": 0
            },
            {
              "condition": "equal",
              "value2": "Juliana",
              "output": 1
            },
            {
              "condition": "equal",
              "value2": "Monique",
              "output": 2
            },
            {
              "condition": "equal",
              "value2": "Isabela",
              "output": 3
            }
          ]
        },
        "options": {
          "fallbackOutput": 0
        }
      },
      "id": "78e15bf7-266d-45b2-b98d-b52b5ea5db31",
      "name": "Selecionar Destinos",
      "type": "n8n-nodes-base.switch",
      "position": [
        -3968,
        -704
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://automacao-abmix-evolution-api.2ckrtx.easypanel.host/message/sendText/Bradesco",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "C52FDF6831B2-439F-9F6A-C9E68962A705"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ '55' + String(($env.SUPERVISOR_WHATS || '').replace(/\\D/g,'')) }}"
            },
            {
              "name": "text",
              "value": "🧭 Lead encaminhado (Fluxo Principal)\n👤 {{ $json.Nome_Completo || $json.nome || 'Cliente' }}\n📞 55{{ String(($json['Telefone com DDD'] || $json.telefone_limpo || '').replace(/\\D/g,'')) }}\n🎯 Atribuído a: {{ $json.vendedor.nome }}\n⭐ Qualificação: {{ $json.classificacao || 'N/A' }} (Score: {{ $json.score || 0 }})\n🆔 {{ $json.Lead_ID || 'sem_id' }}"
            }
          ]
        }
      },
      "id": "whatsapp-supervisor-copia-002",
      "name": "WhatsApp Supervisor (cópia)",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -3744,
        -300
      ],
      "typeVersion": 4
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "10jkc1GdqYdgEp2SBIYf6uYq8-kuMQTAn7yd01yfNWw",
          "mode": "list",
          "cachedResultName": "Leads-Qualificados_Bradesco",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/10jKc1GdqYdgEp2SBIYf6uYq8-kuMQTAn7yd01yfNWw/edit?usp=drivesdk"
        },
        "sheetName": "Leads_Qualificados",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Lead_ID": "={{$json.resumo_vendedor?.lead_id || $json.lead_id || $json.Lead_ID || ''}}",
            "Nome": "={{$json.resumo_vendedor?.nome || $json.nome || $json.Nome || ''}}",
            "Telefone": "={{$json.resumo_vendedor?.telefone || $json.telefone || $json.telefone_limpo || $json.Telefone || ''}}",
            "Email": "={{$json.resumo_vendedor?.email || $json.email || $json.Email || ''}}",
            "Cidade_Estado": "={{$json.resumo_vendedor?.cidade_estado || ($json.cidade && $json.estado ? $json.cidade + '/' + $json.estado : ($json.cidade || $json.estado || 'Não informado'))}}",
            "Idade_Titular": "={{$json.resumo_vendedor?.idade_titular || $json.idade_titular || $json.idade || $json.Idade_Titular || ''}}",
            "Total_Vidas": "={{$json.resumo_vendedor?.total_vidas || $json.total_vidas || $json.vidas || $json.Total_Vidas || 1}}",
            "Idades_Dependentes": "={{$json.resumo_vendedor?.idades_dependentes || $json.idades_dependentes || $json.Idades_Dependentes || 'Não informado'}}",
            "Contratacao": "={{$json.resumo_vendedor?.tipo_contratacao || $json.tipo_contratacao || $json.Contratacao || 'Individual'}}",
            "Hospital_Preferencia": "={{$json.resumo_vendedor?.hospital_preferencia || $json.hospital_preferencia || $json.Hospital_Preferencia || 'Não informado'}}",
            "Plano_Atual": "={{$json.resumo_vendedor?.plano_atual || $json.plano_atual || $json.Plano_Atual || 'Não possui'}}",
            "Preexistencia": "={{$json.resumo_vendedor?.tem_preexistencia || $json.tem_preexistencia || $json.Preexistencia || 'Não informado'}}",
            "Doenca_grave": "={{$json.resumo_vendedor?.doenca_grave || $json.doenca_grave || 'Não informado'}}",
            "Classificacao": "={{$json.resumo_vendedor?.classificacao || $json.classificacao || $json.Classificacao || 'Média'}}",
            "Score": "={{$json.resumo_vendedor?.score || $json.score || $json.Score || 50}}",
            "Plano_Sugerido": "={{$json.resumo_vendedor?.plano_sugerido || $json.plano_sugerido || $json.Plano_Sugerido || 'Bradesco Nacional'}}",
            "Documentos": "={{$json.resumo_vendedor?.documentos_necessarios || $json.documentos_necessarios || $json.Documentos || 'RG, CPF, Comprovante de Residência'}}",
            "Data_Qualificacao": "={{$json.resumo_vendedor?.timestamp_qualificacao || $json.timestamp_qualificacao || $json.Data_Qualificacao || $now.toISO()}}",
            "Status": "={{$json.status || $json.Status || 'Qualificado - Aguardando Vendedor'}}",
            "Vendedor_Nome": "={{$json.vendedor?.nome || $json.vendedor_nome || $json.Vendedor_Nome || 'Não atribuído'}}",
            "Observações_Mariana": "={{$json.resumo_vendedor?.observacoes_mariana || $json.observacoes_mariana || $json['Observações_Mariana'] || (($json.mensagem_mariana ? ('Inicial: ' + $json.mensagem_mariana) : '') + ($json.mensagem_mariana_loop ? ((($json.mensagem_mariana ? ' | ' : '') + 'Loop: ' + $json.mensagem_mariana_loop)) : '')) || ''}}",
            "Payload_JSON": "={{$json | json}}"
          }
        },
        "options": {
          "continueOnFail": true
        }
      },
      "id": "a79fd436-6a3c-436c-aafb-6ac947a7ead2",
      "name": "Salvar Leads Qualificados",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -3744,
        -864
      ],
      "typeVersion": 4,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "ZRCcorwTkMjhn6EC",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "={{$json.vendedor?.email ?? $env.VENDOR_DEFAULT_EMAIL}}",
        "subject": "🔥 {{$json.resumo_vendedor.classificacao}} - {{$json.resumo_vendedor.nome}} | Score: {{$json.resumo_vendedor.score}} | Vendedor: {{$json.vendedor.nome}}",
        "message": "<div style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;'>\n <div style='background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; border-radius: 10px 10px 0 0;'>\n <h1 style='color: white; margin: 0; text-align: center;'>🎯 LEAD QUALIFICADO</h1>\n <h2 style='color: white; margin: 10px 0 0 0; text-align: center;'>{{$json.resumo_vendedor.classificacao}} - Score: {{$json.resumo_vendedor.score}}/100</h2>\n </div>\n \n <div style='background: white; padding: 30px; border: 1px solid #e0e0e0; border-top: 0;'>\n <div style='background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;'>\n <h3 style='color: #333; margin-top: 0;'>👤 Dados do Cliente</h3>\n <p style='margin: 5px 0;'><strong>Nome:</strong> {{$json.resumo_vendedor.nome}}</p>\n <p style='margin: 5px 0;'><strong>Telefone:</strong> <a href='tel:{{$json.resumo_vendedor.telefone}}'>{{$json.resumo_vendedor.telefone}}</a></p>\n <p style='margin: 5px 0;'><strong>Email:</strong> <a href='mailto:{{$json.resumo_vendedor.email}}'>{{$json.resumo_vendedor.email}}</a></p>\n <p style='margin: 5px 0;'><strong>Localização:</strong> {{$json.resumo_vendedor.cidade_estado}}</p>\n </div>\n \n <div style='background: #fff3cd; padding: 20px; border-radius: 8px; margin-bottom: 20px;'>\n <h3 style='color: #333; margin-top: 0;'>📊 Informações do Grupo</h3>\n <p style='margin: 5px 0;'><strong>Idade Titular:</strong> {{$json.resumo_vendedor.idade_titular}} anos</p>\n <p style='margin: 5px 0;'><strong>Total de Vidas:</strong> {{$json.resumo_vendedor.total_vidas}}</p>\n <p style='margin: 5px 0;'><strong>Dependentes:</strong> {{$json.resumo_vendedor.idades_dependentes}}</p>\n <p style='margin: 5px 0;'><strong>Tipo de Contratação:</strong> {{$json.resumo_vendedor.tipo_contratacao}}</p>\n </div>\n \n <div style='background: #d4edda; padding: 20px; border-radius: 8px; margin-bottom: 20px;'>\n <h3 style='color: #333; margin-top: 0;'>🏥 Preferências e Histórico</h3>\n <p style='margin: 5px 0;'><strong>Hospital Preferido:</strong> {{$json.resumo_vendedor.hospital_preferencia}}</p>\n <p style='margin: 5px 0;'><strong>Plano Atual:</strong> {{$json.resumo_vendedor.plano_atual}}</p>\n <p style='margin: 5px 0;'><strong>Preexistência:</strong> {{$json.resumo_vendedor.tem_preexistencia}}</p>\n <p style='margin: 5px 0;'><strong>Doença Grave:</strong> {{$json.resumo_vendedor.doenca_grave}}</p>\n </div>\n \n <div style='background: #cfe2ff; padding: 20px; border-radius: 8px; margin-bottom: 20px;'>\n <h3 style='color: #333; margin-top: 0;'>💼 Recomendações</h3>\n <p style='margin: 5px 0;'><strong>Plano Sugerido:</strong> <span style='background: #28a745; color: white; padding: 3px 10px; border-radius: 3px;'>{{$json.resumo_vendedor.plano_sugerido}}</span></p>\n <p style='margin: 5px 0;'><strong>Documentos Necessários:</strong></p>\n <p style='margin: 5px 0 5px 20px; font-size: 14px;'>{{$json.resumo_vendedor.documentos_necessarios}}</p>\n </div>\n \n <div style='background: #e2e3e5; padding: 20px; border-radius: 8px;'>\n <h3 style='color: #333; margin-top: 0;'>🎯 Vendedor Responsável</h3>\n <p style='margin: 5px 0;'><strong>Nome:</strong> {{$json.vendedor.nome}}</p>\n <p style='margin: 5px 0;'><strong>Email:</strong> <a href='mailto:{{$json.vendedor.email}}'>{{$json.vendedor.email}}</a></p>\n <p style='margin: 5px 0;'><strong>WhatsApp:</strong> <a href='https://wa.me/{{ '55' + String(($json.vendedor.whatsapp || '').replace(/\\D/g,'')) }}'>+55 {{ String(($json.vendedor.whatsapp || '').replace(/\\D/g,'')) }}</a></p>\n </div>\n \n <div style='text-align: center; margin-top: 30px;'>\n <a href='https://wa.me/{{ '55' + String(($json['Telefone com DDD'] || $json.telefone_limpo || '').replace(/\\D/g,'')) }}' style='display: inline-block; background: #25D366; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; font-weight: bold;'>💬 Contatar via WhatsApp</a>\n </div>\n </div>\n \n <div style='background: #f8f9fa; padding: 15px; text-align: center; border-radius: 0 0 10px 10px;'>\n <p style='margin: 0; color: #666; font-size: 12px;'>Lead qualificado em {{$json.resumo_vendedor.timestamp_qualificacao}}</p>\n </div>\n</div>",
        "options": {"continueOnFail": true}
      },
      "id": "3a2b719b-6b15-4bbe-8a12-c89a011e75f1",
      "name": "Email Vendedor Rico Formatado",
      "type": "n8n-nodes-base.gmail",
      "position": [
        -3744,
        -672
      ],
      "typeVersion": 2,
      "webhookId": "4575472a-9aed-4f6c-9c19-0a82336daf34",
      "credentials": {
        "gmailOAuth2": {
          "id": "gmail-credentials",
          "name": "Gmail OAuth2"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://automacao-abmix-evolution-api.2ckrtx.easypanel.host/message/sendText/Bradesco",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "C52FDF6831B2-439F-9F6A-C9E68962A705"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ '55' + String(($json.vendedor.whatsapp||'').replace(/\\D/g,'')) }}"
            },
            {
              "name": "text",
              "value": "🧭 Lead encaminhado (Fluxo Principal)\n👤 {{ $json.Nome_Completo || $json.nome || 'Cliente' }}\n📞 55{{ String(($json['Telefone com DDD'] || $json.telefone_limpo || '').replace(/\\D/g,'')) }}\n🎯 Atribuído a: {{ $json.vendedor.nome }}\n⭐ Qualificação: {{ $json.classificacao || 'N/A' }} (Score: {{ $json.score || 0 }})\n🆔 {{ $json.Lead_ID || 'sem_id' }}\n\n{{$json.mensagem_vendedor_formatada}}\n\n📝 Observações: {{ $json.resumo_vendedor?.observacoes_mariana || (($json.mensagem_mariana ? ('Inicial: ' + $json.mensagem_mariana) : '') + ($json.mensagem_mariana_loop ? ((($json.mensagem_mariana ? ' | ' : '') + 'Loop: ' + $json.mensagem_mariana_loop)) : '') + ($json.hospital_preferencia && $json.hospital_preferencia !== 'Não informado' ? ((($json.mensagem_mariana || $json.mensagem_mariana_loop) ? ' | ' : '') + 'Hosp.: ' + $json.hospital_preferencia) : '') + ($json.tem_preexistencia && $json.tem_preexistencia !== 'Não informado' ? ' | Pré-existência: ' + $json.tem_preexistencia : '') + ($json.doenca_grave && $json.doenca_grave !== 'Não informado' ? ' | Doença grave: ' + $json.doenca_grave : '') + ($json.eh_portabilidade === true ? ' | Portabilidade: Sim' : '')) }}"
            }
          ]
        },
        "options": {"continueOnFail": true}
      },
      "id": "eabf424a-1deb-40e8-b927-561a292f1c7b",
      "name": "WhatsApp Vendedor",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -3744,
        -480
      ],
      "typeVersion": 4
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.agendor.com.br/v3/deals",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$json.vendedor.agendor_token || $credentials.agendorApi.token}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"title\": \"{{$json.resumo_vendedor.nome}} - Bradesco {{$json.resumo_vendedor.plano_sugerido}} [{{$json.vendedor.nome}}]\",\n  \"value\": {{(Number($json.resumo_vendedor.total_vidas) || 1) * 350}},\n  \"contact\": {\n    \"name\": \"{{$json.resumo_vendedor.nome}}\",\n    \"email\": \"{{$json.resumo_vendedor.email}}\",\n    \"phone\": \"{{$json.resumo_vendedor.telefone}}\",\n    \"city\": \"{{$json.resumo_vendedor.cidade_estado}}\"\n  },\n  \"description\": \"{{$json.mensagem_vendedor_formatada}}\\n\\n🎯 Vendedor Responsável: {{$json.vendedor.nome}}\",\n  \"ranking\": {{$json.resumo_vendedor.score}},\n  \"dealStage\": 1\n}",
        "options": {"continueOnFail": true}
      },
      "id": "e9de8ac6-b0a5-4695-8418-4fcfe126ea32",
      "name": "Criar Deal Agendor",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -3744,
        -1056
      ],
      "typeVersion": 4
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://automacao-abmix-evolution-api.2ckrtx.easypanel.host/message/sendText/Bradesco",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "C52FDF6831B2-439F-9F6A-C9E68962A705"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ '55' + String(($json[\"Telefone com DDD\"] || $json.telefone_limpo || $json.telefone || '').replace(/\\D/g,'')).replace(/^55/,'') }}"
            },
            {
              "name": "text",
              "value": "Perfeito! 🎉\n\nJá tenho todas as informações necessárias.\n\nUm consultor especializado entrará em contato com você em breve com uma proposta personalizada.\n\nEnquanto isso, se tiver alguma dúvida, pode me chamar aqui!\n\n— Mariana · Bradesco Saúde"
            }
          ]
        },
        "options": {"continueOnFail": true}
      },
      "id": "3a4aa8de-5f24-4046-a352-58217a8a6499",
      "name": "Mensagem Final Cliente",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -3744,
        -288
      ],
      "typeVersion": 4
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "10jkc1GdqYdgEp2SBIYf6uYq8-kuMQTAn7yd01yfNWw",
          "mode": "list"
        },
        "sheetName": {
          "__rl": true,
          "value": "Leads_Qualificados",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Lead_ID": "={{$json.lead_id || $json.Lead_ID || $json.id || $json.leadId || $json.lead_identifier || ''}}",
            "Nome Completo": "={{$json.nome || $json['Nome Completo'] || $json.nome_completo || $json.name || $json.cliente_nome || ''}}",
            "Telefone com DDD": "={{$json.telefone_limpo || $json.telefone || $json['Telefone com DDD'] || $json.phone || $json.celular || $json.whatsapp || ''}}",
            " E-mail": "={{$json.email || $json[' E-mail'] || $json.e_mail || $json.cliente_email || $json.mail || ''}}",
            "Data de Nascimento": "={{$json.nascimento || $json['Data de Nascimento'] || $json.data_nascimento || $json.birth_date || $json.aniversario || ''}}",
            "Estado": "={{$json.estado || $json.Estado || $json.uf || $json.state || $json.regiao || ''}}",
            "Cidade": "={{$json.cidade || $json.Cidade || $json.city || $json.municipio || $json.localidade || ''}}",
            "Número de Vidas": "={{$json.vidas || $json.total_vidas || $json['Número de Vidas'] || $json.numero_vidas || $json.dependentes || $json.pessoas || 1}}",
            " Mensagem": "={{$json.mensagem || $json[' Mensagem'] || $json.message || $json.texto || $json.observacao || $json.comentario || ''}}",
            "Idade_Calculada": "={{$json.idade || $json.idade_titular || $json.Idade_Calculada || $json.age || $json.anos || ''}}",
            "Status": "={{$json.status || $json.Status || $json.situacao || $json.estado_lead || 'Novo - Aguardando IA'}}",
            " Classificacao_Inicial": "={{$json.classificacao_inicial || $json.classificacao || $json[' Classificacao_Inicial'] || $json.categoria || $json.tipo || 'Média'}}",
            " Score_Inicial": "={{$json.score_inicial || $json.score || $json[' Score_Inicial'] || $json.pontuacao || $json.nota || 50}}",
            " Data_Hora": "={{$json.timestamp || $json[' Data_Hora'] || $json.data_hora || $json.created_at || $json.data_criacao || $now.toISO()}}",
            "Remarketing_Data": "={{$json.remarketing_data || $json.Remarketing_Data || $json.data_remarketing || $json.ultimo_contato || ''}}",
            "Agendor_Person_ID": "={{$json.agendor_person_id || $json.Agendor_Person_ID || $json.person_id || $json.contato_id || ''}}",
            "Agendor_Deal_ID": "={{$json.agendor_deal_id || $json.Agendor_Deal_ID || $json.deal_id || $json.negocio_id || ''}}",
            "Agendor_Status": "={{$json.agendor_status || $json.Agendor_Status || $json.status_agendor || $json.situacao_crm || ''}}",
            "Agendor_Sync": "={{$json.agendor_sync || $json.Agendor_Sync || $json.sincronizado || $json.data_sync || ''}}",
            "Tentativas_Remarketing": "={{$json.tentativas_remarketing || $json.Tentativas_Remarketing || $json.tentativas || $json.contatos || 0}}",
            "Ultima_Atividade": "={{$json.ultima_atividade || $json.Ultima_Atividade || $json.timestamp || $json.last_activity || $json.data_atividade || $now.toISO()}}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Lead_ID",
              "displayName": "Lead_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Nome Completo",
              "displayName": "Nome Completo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Telefone com DDD",
              "displayName": "Telefone com DDD",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "E-mail",
              "displayName": "E-mail",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Data de Nascimento",
              "displayName": "Data de Nascimento",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Estado",
              "displayName": "Estado",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Cidade",
              "displayName": "Cidade",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Número de Vidas",
              "displayName": "Número de Vidas",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Mensagem",
              "displayName": "Mensagem",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Idade_Calculada",
              "displayName": "Idade_Calculada",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Classificacao_Inicial",
              "displayName": "Classificacao_Inicial",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Score_Inicial",
              "displayName": "Score_Inicial",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Data_Hora",
              "displayName": "Data_Hora",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Remarketing_Data",
              "displayName": "Remarketing_Data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "useAppend": true,
          "continueOnFail": true
        }
      },
      "id": "aadedf6c-3e0c-4e3d-8332-311d73ab8e1f",
      "name": "📋 Salvar Leads Brutos",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -7776,
        688
      ],
      "typeVersion": 4,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "ZRCcorwTkMjhn6EC",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1bGuTWcNCMjTed91deAZo8eGwy38tqWh8C7rU6PPG27M",
          "mode": "list",
          "cachedResultName": "Leads_Bruto_Bradesco",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1bGuTWcNCMjTed91deAZo8eGwy38tqWh8C7rU6PPG27M/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "Leads_Brutos",
          "mode": "name"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "Status",
              "lookupValue": "Novo - Aguardando IA"
            }
          ]
        },
        "options": {"continueOnFail": true}
      },
      "id": "schedule-diario-10h",
      "name": "Schedule Diário 10:00",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -7776,
        912
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.remarketing_on}}",
              "value2": true
            }
          ]
        }
      },
      "id": "if-remarketing-on-001",
      "name": "IF Remarketing ON",
      "type": "n8n-nodes-base.if",
      "position": [
        -7552,
        912
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "read",
        "documentId": {
          "__rl": true,
          "value": "1bGuTWcNCMjTed91deAZo8eGwy38tqWh8C7rU6PPG27M",
          "mode": "list",
          "cachedResultName": "Leads_Bruto_Bradesco",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1bGuTWcNCMjTed91deAZo8eGwy38tqWh8C7rU6PPG27M/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "Leads_Brutos",
          "mode": "name"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "Status",
              "lookupValue": "Novo - Aguardando IA"
            },
            {
              "lookupColumn": " Data_Hora",
              "lookupValue": "={{$now.minus(24,'hours').toISO()}}",
              "condition": "dateTimeBefore"
            },
            {
              "lookupColumn": "Ultima_Atividade",
              "lookupValue": "={{$now.set({hour:9,minute:0}).toISO()}}",
              "condition": "dateTimeBefore"
            },
            {
              "lookupColumn": "Tentativas_Remarketing",
              "lookupValue": "3",
              "condition": "smaller"
            }
          ]
        },
        "options": {"continueOnFail": true}
      },
      "id": "cea019f9-2c1f-4267-94ab-fca7475f0d17",
      "name": "Buscar Leads Pendentes",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -7552,
        688
      ],
      "typeVersion": 4,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "ZRCcorwTkMjhn6EC",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {"continueOnFail": true}
      },
      "id": "2921eca3-5315-43c9-b57b-1950e54e642b",
      "name": "Loop Leads",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -7328,
        688
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://automacao-abmix-evolution-api.2ckrtx.easypanel.host/message/sendText/Bradesco",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "C52FDF6831B2-439F-9F6A-C9E68962A705"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ '55' + String(($json[\"Telefone com DDD\"] || $json.telefone_limpo || $json.telefone || '').replace(/\\D/g,'')).replace(/^55/,'') }}"
            },
            {
              "name": "text",
              "value": "={{ $json.mensagem_remarketing + '\n\n📝 Observações: ' + ($json.resumo_vendedor?.observacoes_mariana || (($json.mensagem_mariana ? ('Inicial: ' + $json.mensagem_mariana) : '') + ($json.mensagem_mariana_loop ? ((($json.mensagem_mariana ? ' | ' : '') + 'Loop: ' + $json.mensagem_mariana_loop)) : '') + ($json.hospital_preferencia && $json.hospital_preferencia !== 'Não informado' ? ((($json.mensagem_mariana || $json.mensagem_mariana_loop) ? ' | ' : '') + 'Hosp.: ' + $json.hospital_preferencia) : '') + ($json.tem_preexistencia && $json.tem_preexistencia !== 'Não informado' ? ' | Pré-existência: ' + $json.tem_preexistencia : '') + ($json.doenca_grave && $json.doenca_grave !== 'Não informado' ? ' | Doença grave: ' + $json.doenca_grave : '') + ($json.eh_portabilidade === true ? ' | Portabilidade: Sim' : ''))) }}"
            }
          ]
        },
        "options": {"continueOnFail": true}
      },
      "id": "826390bd-9ff7-478e-ad7e-938bb029e135",
      "name": "Mensagem Dia Seguinte",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -7104,
        624
      ],
      "typeVersion": 4
    },
    {
      "parameters": {
        "jsCode": "// Decrementa contador de execuções ativas\nconst data = $getWorkflowStaticData('global');\ndata.execucoesAtivas = Math.max(0, (data.execucoesAtivas || 1) - 1);\nreturn $input.all();"
      },
      "id": "decrementar-execucoes-001",
      "name": "Decrementar Execuções",
      "type": "n8n-nodes-base.code",
      "position": [
        -3296,
        -288
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1bGuTWcNCMjTed91deAZo8eGwy38tqWh8C7rU6PPG27M",
          "mode": "list",
          "cachedResultName": "Leads_Brutos"
        },
        "sheetName": {
          "__rl": true,
          "value": "Leads_Brutos",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Status": "={{($json.Tentativas_Remarketing || $json.tentativas_remarketing || $json.tentativas || 0) >= 2 ? 'Arquivado_Sem_Resposta' : 'Remarketing_Enviado'}}",
            "Remarketing_Data": "={{$json.remarketing_data || $json.Remarketing_Data || $json.data_remarketing || $json.ultimo_contato || $now.toISO()}}",
            "Tentativas_Remarketing": "={{($json.Tentativas_Remarketing || $json.tentativas_remarketing || $json.tentativas || $json.contatos || 0) + 1}}",
            "Ultima_Atividade": "={{$json.ultima_atividade || $json.Ultima_Atividade || $json.timestamp || $json.last_activity || $json.data_atividade || $now.toISO()}}"
          },
          "matchingColumns": [
            "Lead_ID"
          ],
          "schema": [
            {
              "id": "Lead_ID",
              "displayName": "Lead_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Nome Completo",
              "displayName": "Nome Completo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Telefone com DDD",
              "displayName": "Telefone com DDD",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": " E-mail",
              "displayName": " E-mail",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Data de Nascimento",
              "displayName": "Data de Nascimento",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Estado",
              "displayName": "Estado",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Cidade",
              "displayName": "Cidade",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Número de Vidas",
              "displayName": "Número de Vidas",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": " Mensagem",
              "displayName": " Mensagem",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Idade_Calculada",
              "displayName": "Idade_Calculada",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": " Classificacao_Inicial",
              "displayName": " Classificacao_Inicial",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": " Score_Inicial",
              "displayName": " Score_Inicial",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": " Data_Hora",
              "displayName": " Data_Hora",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Remarketing_Data",
              "displayName": "Remarketing_Data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {"continueOnFail": true}
      },
      "id": "966eef85-aec5-4243-98a0-084d36d1c5c3",
      "name": "Atualizar Status Remarketing",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -6880,
        688
      ],
      "typeVersion": 4,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "ZRCcorwTkMjhn6EC",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * Sistema Rodízio Vendedores\n * - Escolhe vendedora disponível (com todos os serviços ok)\n * - Mantém rotação em storage\n * - Sempre envia CÓPIA para o Rodrigo (supervisão)\n * - Define campos vendedor.nome e vendedor.whatsapp\n */\n\nconst sd = $getWorkflowStaticData('global');\n\n// ====== CADASTRO DOS VENDEDORES (RODÍZIO ATIVO) ======\nconst vendedores = [\n  {\n    nome: 'Fabiana',\n    email: 'comercial@abmix.com.br',\n    whatsapp: '11971593900',\n    agendor_token: '638d91d6-d527-4ab4-bbb4-8739b30b2d15',\n    leads_sheet_tab: 'Leads_Fabiana',\n    planilha_ok: true,\n    agendor_ok: true,\n    gmail_ok: true,\n    whatsapp_ok: true,\n  },\n  {\n    nome: 'Juliana',\n    email: 'comercial6@abmix.com.br',\n    whatsapp: '11938020607',\n    agendor_token: 'f9d3388b-2842-4011-8031-21effa4f787b',\n    leads_sheet_tab: 'Leads_Juliana',\n    planilha_ok: true,\n    agendor_ok: true,\n    gmail_ok: true,\n    whatsapp_ok: true,\n  },\n  {\n    nome: 'Monique',\n    email: 'comercial2@abmix.com.br',\n    whatsapp: '11945352603',\n    agendor_token: '8b8b5a47-6626-4db2-99b6-6b769c3742c5',\n    leads_sheet_tab: 'Leads_Monique',\n    planilha_ok: true,\n    agendor_ok: true,\n    gmail_ok: true,\n    whatsapp_ok: true,\n  },\n  {\n    nome: 'Isabela',\n    email: 'comercial4@abmix.com.br',\n    whatsapp: '11953281647',\n    agendor_token: '6dd660a9-d4c1-436a-8528-b82e93157865',\n    leads_sheet_tab: 'Leads_Isabela',\n    planilha_ok: true,\n    agendor_ok: true,\n    gmail_ok: true,\n    whatsapp_ok: true,\n  },\n  {\n    nome: 'Rodrigo',\n    email: 'supervisao@abmix.com.br',\n    whatsapp: '11996163900',\n    agendor_token: '6f1f347a-4599-4148-84c7-a54dad6384d8',\n    leads_sheet_tab: 'Leads_Rodrigo',\n    planilha_ok: true,\n    agendor_ok: true,\n    gmail_ok: true,\n    whatsapp_ok: true,\n  },\n];\n\n// ====== SUPERVISÃO (RECEBE TODOS) ======\nconst supervisor = {\n  nome: 'Rodrigo',\n  email: 'supervisao@abmix.com.br',\n  whatsapp: '11996163900',\n  recebe_todos: true,\n};\n\n// ====== FILTRAR QUEM ESTÁ COMPLETO ======\nconst ativos = vendedores.filter(v =>\n  v.planilha_ok && v.agendor_ok && v.gmail_ok && v.whatsapp_ok\n);\n\n// fallback: se ninguém completo, joga para o Rodrigo\nif (ativos.length === 0) {\n  return [{\n    ...$json,\n    vendedor_alvo: supervisor.nome,\n    vendedor_email: supervisor.email,\n    vendedor_whatsapp: supervisor.whatsapp,\n    \n    // Campos estruturados do vendedor\n    vendedor: {\n      nome: supervisor.nome,\n      email: supervisor.email,\n      whatsapp: supervisor.whatsapp\n    },\n    \n    enviar_copia_supervisor: false, // já é o próprio\n    supervisor_email: supervisor.email,\n    supervisor_whatsapp: supervisor.whatsapp,\n    rodada_atual: -1,\n    timestamp_distribuicao: new Date().toISOString()\n  }];\n}\n\n// ====== RODÍZIO ======\nconst idx = typeof sd.rodizio_idx === 'number' ? sd.rodizio_idx : -1;\nconst nextIdx = (idx + 1) % ativos.length;\nsd.rodizio_idx = nextIdx;\n\nconst escolhido = ativos[nextIdx];\n\n// ====== SAÍDA PADRONIZADA ======\nreturn [{\n  ...$json,\n  vendedor_alvo: escolhido.nome,\n  vendedor_email: escolhido.email,\n  vendedor_whatsapp: escolhido.whatsapp,\n  \n  // Campos estruturados do vendedor (OBRIGATÓRIO)\n  vendedor: {\n    nome: escolhido.nome,\n    email: escolhido.email,\n    whatsapp: escolhido.whatsapp,\n    agendor_token: escolhido.agendor_token,\n    leads_sheet_tab: escolhido.leads_sheet_tab\n  },\n  \n  // Supervisor sempre recebe cópia\n  enviar_copia_supervisor: true,\n  supervisor_email: supervisor.email,\n  supervisor_whatsapp: supervisor.whatsapp,\n  \n  rodada_atual: nextIdx,\n  timestamp_distribuicao: new Date().toISOString()\n}];"
      },
      "id": "6b268da7-7d9a-4546-907d-3adc3c3a4124",
      "name": "Sistema Rodízio Vendedores",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4192,
        -672
      ]
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "https://docs.google.com/spreadsheets/d/1bUg8Kqhl_4dhIy_unfqqBYqhV9ICrGyHu3muv0LW1Hk/edit?gid=0#gid=0",
          "mode": "url",
          "cachedResultName": "Leads_Rodrigo",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1bUg8Kqhl_4dhIy_unfqqBYqhV9ICrGyHu3muv0LW1Hk/edit?gid=0#gid=0"
        },
        "sheetName": "Leads_Bradesco",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Lead_ID": "={{$json.resumo_vendedor?.lead_id || $json.lead_id || $json.Lead_ID || ''}}",
            "Nome": "={{$json.resumo_vendedor?.nome || $json.nome || $json.Nome || ''}}",
            "Telefone": "={{$json.resumo_vendedor?.telefone || $json.telefone || $json.telefone_limpo || $json.Telefone || ''}}",
            "Email": "={{$json.resumo_vendedor?.email || $json.email || $json.Email || ''}}",
            "Cidade_Estado": "={{$json.resumo_vendedor?.cidade_estado || ($json.cidade && $json.estado ? $json.cidade + '/' + $json.estado : ($json.cidade || $json.estado || 'Não informado'))}}",
            "Idade_Titular": "={{$json.resumo_vendedor?.idade_titular || $json.idade_titular || $json.idade || $json.Idade_Titular || ''}}",
            "Total_Vidas": "={{$json.resumo_vendedor?.total_vidas || $json.total_vidas || $json.vidas || $json.Total_Vidas || 1}}",
            "Idades_Dependentes": "={{$json.resumo_vendedor?.idades_dependentes || $json.idades_dependentes || $json.Idades_Dependentes || 'Não informado'}}",
            "Contratacao": "={{$json.resumo_vendedor?.tipo_contratacao || $json.tipo_contratacao || $json.Contratacao || 'Individual'}}",
            "Hospital_Preferencia": "={{$json.resumo_vendedor?.hospital_preferencia || $json.hospital_preferencia || $json.Hospital_Preferencia || 'Não informado'}}",
            "Plano_Atual": "={{$json.resumo_vendedor?.plano_atual || $json.plano_atual || $json.Plano_Atual || 'Não possui'}}",
            "Preexistencia": "={{$json.resumo_vendedor?.tem_preexistencia || $json.tem_preexistencia || $json.Preexistencia || 'Não informado'}}",
            "Doenca_grave": "={{$json.resumo_vendedor?.doenca_grave || $json.doenca_grave || 'Não informado'}}",
            "Classificacao": "={{$json.resumo_vendedor?.classificacao || $json.classificacao || $json.Classificacao || 'Média'}}",
            "Score": "={{$json.resumo_vendedor?.score || $json.score || $json.Score || 50}}",
            "Plano_Sugerido": "={{$json.resumo_vendedor?.plano_sugerido || $json.plano_sugerido || $json.Plano_Sugerido || 'Bradesco Nacional'}}",
            "Documentos": "={{$json.resumo_vendedor?.documentos_necessarios || $json.documentos_necessarios || $json.Documentos || 'RG, CPF, Comprovante de Residência'}}",
            "Data_Qualificacao": "={{$json.resumo_vendedor?.timestamp_qualificacao || $json.timestamp_qualificacao || $json.Data_Qualificacao || $now.toISO()}}",
            "Status": "={{$json.status || $json.Status || 'Qualificado - Aguardando Vendedor'}}",
            "Vendedor_Nome": "={{$json.resumo_vendedor?.vendedor_nome || $json.vendedor_nome || $json.vendedor?.nome || 'Rodrigo'}}",
            "Observações_Mariana": "={{$json.resumo_vendedor?.observacoes_mariana || $json.observacoes_mariana || $json['Observações_Mariana'] || (($json.mensagem_mariana ? ('Inicial: ' + $json.mensagem_mariana) : '') + ($json.mensagem_mariana_loop ? ((($json.mensagem_mariana ? ' | ' : '') + 'Loop: ' + $json.mensagem_mariana_loop)) : '')) || ''}}",
            "Payload_JSON": "={{$json | json}}"
          }
        },
        "options": {"continueOnFail": true}
      },
      "id": "ea736e9e-dd23-43bd-98af-a808e268f967",
      "name": "📊 PLANILHA RODRIGO - Leads Qualificados",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -7776,
        1136
      ],
      "typeVersion": 4
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "https://docs.google.com/spreadsheets/d/19_5eBzI4Isek9ib_Tdsy_CzUj421IR7IReiHG2s77kA/edit?usp=sharing",
          "mode": "url",
          "cachedResultName": "Leads_Fabiana",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/19_5eBzI4Isek9ib_Tdsy_CzUj421IR7IReiHG2s77kA/edit?usp=sharing"
        },
        "sheetName": "Leads_Bradesco",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Lead_ID": "={{$json.resumo_vendedor?.lead_id || $json.lead_id || $json.Lead_ID || ''}}",
            "Nome": "={{$json.resumo_vendedor?.nome || $json.nome || $json.Nome || ''}}",
            "Telefone": "={{$json.resumo_vendedor?.telefone || $json.telefone || $json.telefone_limpo || $json.Telefone || ''}}",
            "Email": "={{$json.resumo_vendedor?.email || $json.email || $json.Email || ''}}",
            "Cidade_Estado": "={{$json.resumo_vendedor?.cidade_estado || ($json.cidade && $json.estado ? $json.cidade + '/' + $json.estado : ($json.cidade || $json.estado || 'Não informado'))}}",
            "Idade_Titular": "={{$json.resumo_vendedor?.idade_titular || $json.idade_titular || $json.idade || $json.Idade_Titular || ''}}",
            "Total_Vidas": "={{$json.resumo_vendedor?.total_vidas || $json.total_vidas || $json.vidas || $json.Total_Vidas || 1}}",
            "Idades_Dependentes": "={{$json.resumo_vendedor?.idades_dependentes || $json.idades_dependentes || $json.Idades_Dependentes || 'Não informado'}}",
            "Contratacao": "={{$json.resumo_vendedor?.tipo_contratacao || $json.tipo_contratacao || $json.Contratacao || 'Individual'}}",
            "Hospital_Preferencia": "={{$json.resumo_vendedor?.hospital_preferencia || $json.hospital_preferencia || $json.Hospital_Preferencia || 'Não informado'}}",
            "Plano_Atual": "={{$json.resumo_vendedor?.plano_atual || $json.plano_atual || $json.Plano_Atual || 'Não possui'}}",
            "Preexistencia": "={{$json.resumo_vendedor?.tem_preexistencia || $json.tem_preexistencia || $json.Preexistencia || 'Não informado'}}",
            "Doenca_grave": "={{$json.resumo_vendedor?.doenca_grave || $json.doenca_grave || 'Não informado'}}",
            "Classificacao": "={{$json.resumo_vendedor?.classificacao || $json.classificacao || $json.Classificacao || 'Média'}}",
            "Score": "={{$json.resumo_vendedor?.score || $json.score || $json.Score || 50}}",
            "Plano_Sugerido": "={{$json.resumo_vendedor?.plano_sugerido || $json.plano_sugerido || $json.Plano_Sugerido || 'Bradesco Nacional'}}",
            "Documentos": "={{$json.resumo_vendedor?.documentos_necessarios || $json.documentos_necessarios || $json.Documentos || 'RG, CPF, Comprovante de Residência'}}",
            "Data_Qualificacao": "={{$json.resumo_vendedor?.timestamp_qualificacao || $json.timestamp_qualificacao || $json.Data_Qualificacao || $now.toISO()}}",
            "Status": "={{$json.status || $json.Status || 'Qualificado - Aguardando Vendedor'}}",
            "Vendedor_Nome": "={{$json.resumo_vendedor?.vendedor_nome || $json.vendedor_nome || $json.vendedor?.nome || 'Fabiana'}}",
            "Observações_Mariana": "={{$json.resumo_vendedor?.observacoes_mariana || $json.observacoes_mariana || $json['Observações_Mariana'] || (($json.mensagem_mariana ? ('Inicial: ' + $json.mensagem_mariana) : '') + ($json.mensagem_mariana_loop ? ((($json.mensagem_mariana ? ' | ' : '') + 'Loop: ' + $json.mensagem_mariana_loop)) : '')) || ''}}",
            "Payload_JSON": "={{$json | json}}"
          }
        },
        "options": {"continueOnFail": true}
      },
      "id": "17d6aa79-2cf8-4f47-b455-80d05406376a",
      "name": "📊 PLANILHA FABIANA - Leads Qualificados",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -7776,
        1360
      ],
      "typeVersion": 4
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "https://docs.google.com/spreadsheets/d/1I739og8MjuggQ_rJhrcyeDNGpkgzxLQ4Qim73Xy6MbU/edit?usp=sharing",
          "mode": "url",
          "cachedResultName": "Leads_Juliana",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1I739og8MjuggQ_rJhrcyeDNGpkgzxLQ4Qim73Xy6MbU/edit?usp=sharing"
        },
        "sheetName": "Leads_Bradesco",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Lead_ID": "={{$json.resumo_vendedor?.lead_id || $json.lead_id || $json.Lead_ID || ''}}",
            "Nome": "={{$json.resumo_vendedor?.nome || $json.nome || $json.Nome || ''}}",
            "Telefone": "={{$json.resumo_vendedor?.telefone || $json.telefone || $json.telefone_limpo || $json.Telefone || ''}}",
            "Email": "={{$json.resumo_vendedor?.email || $json.email || $json.Email || ''}}",
            "Cidade_Estado": "={{$json.resumo_vendedor?.cidade_estado || ($json.cidade && $json.estado ? $json.cidade + '/' + $json.estado : ($json.cidade || $json.estado || 'Não informado'))}}",
            "Idade_Titular": "={{$json.resumo_vendedor?.idade_titular || $json.idade_titular || $json.idade || $json.Idade_Titular || ''}}",
            "Total_Vidas": "={{$json.resumo_vendedor?.total_vidas || $json.total_vidas || $json.vidas || $json.Total_Vidas || 1}}",
            "Idades_Dependentes": "={{$json.resumo_vendedor?.idades_dependentes || $json.idades_dependentes || $json.Idades_Dependentes || 'Não informado'}}",
            "Contratacao": "={{$json.resumo_vendedor?.tipo_contratacao || $json.tipo_contratacao || $json.Contratacao || 'Individual'}}",
            "Hospital_Preferencia": "={{$json.resumo_vendedor?.hospital_preferencia || $json.hospital_preferencia || $json.Hospital_Preferencia || 'Não informado'}}",
            "Plano_Atual": "={{$json.resumo_vendedor?.plano_atual || $json.plano_atual || $json.Plano_Atual || 'Não possui'}}",
            "Preexistencia": "={{$json.resumo_vendedor?.tem_preexistencia || $json.tem_preexistencia || $json.Preexistencia || 'Não informado'}}",
            "Doenca_grave": "={{$json.resumo_vendedor?.doenca_grave || $json.doenca_grave || 'Não informado'}}",
            "Classificacao": "={{$json.resumo_vendedor?.classificacao || $json.classificacao || $json.Classificacao || 'Média'}}",
            "Score": "={{$json.resumo_vendedor?.score || $json.score || $json.Score || 50}}",
            "Plano_Sugerido": "={{$json.resumo_vendedor?.plano_sugerido || $json.plano_sugerido || $json.Plano_Sugerido || 'Bradesco Nacional'}}",
            "Documentos": "={{$json.resumo_vendedor?.documentos_necessarios || $json.documentos_necessarios || $json.Documentos || 'RG, CPF, Comprovante de Residência'}}",
            "Data_Qualificacao": "={{$json.resumo_vendedor?.timestamp_qualificacao || $json.timestamp_qualificacao || $json.Data_Qualificacao || $now.toISO()}}",
            "Status": "={{$json.status || $json.Status || 'Qualificado - Aguardando Vendedor'}}",
            "Vendedor_Nome": "={{$json.resumo_vendedor?.vendedor_nome || $json.vendedor_nome || $json.vendedor?.nome || 'Juliana'}}",
            "Observações_Mariana": "={{$json.resumo_vendedor?.observacoes_mariana || $json.observacoes_mariana || $json['Observações_Mariana'] || (($json.mensagem_mariana ? ('Inicial: ' + $json.mensagem_mariana) : '') + ($json.mensagem_mariana_loop ? ((($json.mensagem_mariana ? ' | ' : '') + 'Loop: ' + $json.mensagem_mariana_loop)) : '')) || ''}}",
            "Payload_JSON": "={{$json | json}}"
          }
        },
        "options": {"continueOnFail": true}
      },
      "id": "942ccbd1-787d-40ac-97e9-ccd3e2db0572",
      "name": "📊 PLANILHA JULIANA - Leads Qualificados",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -7776,
        1584
      ],
      "typeVersion": 4
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "https://docs.google.com/spreadsheets/d/1rj7mWV6IkVrjVkAr0vFGW7IxtvPKF2JI6vZ42Uh8rcs/edit?usp=sharing",
          "mode": "url",
          "cachedResultName": "Leads_Monique",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rj7mWV6IkVrjVkAr0vFGW7IxtvPKF2JI6vZ42Uh8rcs/edit?usp=sharing"
        },
        "sheetName": "Leads_Bradesco",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Lead_ID": "={{$json.resumo_vendedor?.lead_id || $json.lead_id || $json.Lead_ID || ''}}",
            "Nome": "={{$json.resumo_vendedor?.nome || $json.nome || $json.Nome || ''}}",
            "Telefone": "={{$json.resumo_vendedor?.telefone || $json.telefone || $json.telefone_limpo || $json.Telefone || ''}}",
            "Email": "={{$json.resumo_vendedor?.email || $json.email || $json.Email || ''}}",
            "Cidade_Estado": "={{$json.resumo_vendedor?.cidade_estado || ($json.cidade && $json.estado ? $json.cidade + '/' + $json.estado : ($json.cidade || $json.estado || 'Não informado'))}}",
            "Idade_Titular": "={{$json.resumo_vendedor?.idade_titular || $json.idade_titular || $json.idade || $json.Idade_Titular || ''}}",
            "Total_Vidas": "={{$json.resumo_vendedor?.total_vidas || $json.total_vidas || $json.vidas || $json.Total_Vidas || 1}}",
            "Idades_Dependentes": "={{$json.resumo_vendedor?.idades_dependentes || $json.idades_dependentes || $json.Idades_Dependentes || 'Não informado'}}",
            "Contratacao": "={{$json.resumo_vendedor?.tipo_contratacao || $json.tipo_contratacao || $json.Contratacao || 'Individual'}}",
            "Hospital_Preferencia": "={{$json.resumo_vendedor?.hospital_preferencia || $json.hospital_preferencia || $json.Hospital_Preferencia || 'Não informado'}}",
            "Plano_Atual": "={{$json.resumo_vendedor?.plano_atual || $json.plano_atual || $json.Plano_Atual || 'Não possui'}}",
            "Preexistencia": "={{$json.resumo_vendedor?.tem_preexistencia || $json.tem_preexistencia || $json.Preexistencia || 'Não informado'}}",
            "Doenca_grave": "={{$json.resumo_vendedor?.doenca_grave || $json.doenca_grave || 'Não informado'}}",
            "Classificacao": "={{$json.resumo_vendedor?.classificacao || $json.classificacao || $json.Classificacao || 'Média'}}",
            "Score": "={{$json.resumo_vendedor?.score || $json.score || $json.Score || 50}}",
            "Plano_Sugerido": "={{$json.resumo_vendedor?.plano_sugerido || $json.plano_sugerido || $json.Plano_Sugerido || 'Bradesco Nacional'}}",
            "Documentos": "={{$json.resumo_vendedor?.documentos_necessarios || $json.documentos_necessarios || $json.Documentos || 'RG, CPF, Comprovante de Residência'}}",
            "Data_Qualificacao": "={{$json.resumo_vendedor?.timestamp_qualificacao || $json.timestamp_qualificacao || $json.Data_Qualificacao || $now.toISO()}}",
            "Status": "={{$json.status || $json.Status || 'Qualificado - Aguardando Vendedor'}}",
            "Vendedor_Nome": "={{$json.resumo_vendedor?.vendedor_nome || $json.vendedor_nome || $json.vendedor?.nome || 'Monique'}}",
            "Observações_Mariana": "={{$json.resumo_vendedor?.observacoes_mariana || $json.observacoes_mariana || $json['Observações_Mariana'] || (($json.mensagem_mariana ? ('Inicial: ' + $json.mensagem_mariana) : '') + ($json.mensagem_mariana_loop ? ((($json.mensagem_mariana ? ' | ' : '') + 'Loop: ' + $json.mensagem_mariana_loop)) : '')) || ''}}",
            "Payload_JSON": "={{$json | json}}"
          }
        },
        "options": {"continueOnFail": true}
      },
      "id": "41f7bd32-1628-4dc7-95dd-a48ee3638035",
      "name": "📊 PLANILHA MONIQUE - Leads Qualificados",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -7776,
        1808
      ],
      "typeVersion": 4
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "https://docs.google.com/spreadsheets/d/1qpkW3YtDlTKD7XzDn3NaT2dTCDWAWWr7q6Wku5ufAq4/edit?usp=sharing",
          "mode": "url",
          "cachedResultName": "Leads_Isabela",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1qpkW3YtDlTKD7XzDn3NaT2dTCDWAWWr7q6Wku5ufAq4/edit?usp=sharing"
        },
        "sheetName": "Leads_Bradesco",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Lead_ID": "={{$json.resumo_vendedor?.lead_id || $json.lead_id || $json.Lead_ID || ''}}",
            "Nome": "={{$json.resumo_vendedor?.nome || $json.nome || $json.Nome || ''}}",
            "Telefone": "={{$json.resumo_vendedor?.telefone || $json.telefone || $json.telefone_limpo || $json.Telefone || ''}}",
            "Email": "={{$json.resumo_vendedor?.email || $json.email || $json.Email || ''}}",
            "Cidade_Estado": "={{$json.resumo_vendedor?.cidade_estado || ($json.cidade && $json.estado ? $json.cidade + '/' + $json.estado : ($json.cidade || $json.estado || 'Não informado'))}}",
            "Idade_Titular": "={{$json.resumo_vendedor?.idade_titular || $json.idade_titular || $json.idade || $json.Idade_Titular || ''}}",
            "Total_Vidas": "={{$json.resumo_vendedor?.total_vidas || $json.total_vidas || $json.vidas || $json.Total_Vidas || 1}}",
            "Idades_Dependentes": "={{$json.resumo_vendedor?.idades_dependentes || $json.idades_dependentes || $json.Idades_Dependentes || 'Não informado'}}",
            "Contratacao": "={{$json.resumo_vendedor?.tipo_contratacao || $json.tipo_contratacao || $json.Contratacao || 'Individual'}}",
            "Hospital_Preferencia": "={{$json.resumo_vendedor?.hospital_preferencia || $json.hospital_preferencia || $json.Hospital_Preferencia || 'Não informado'}}",
            "Plano_Atual": "={{$json.resumo_vendedor?.plano_atual || $json.plano_atual || $json.Plano_Atual || 'Não possui'}}",
            "Preexistencia": "={{$json.resumo_vendedor?.tem_preexistencia || $json.tem_preexistencia || $json.Preexistencia || 'Não informado'}}",
            "Doenca_grave": "={{$json.resumo_vendedor?.doenca_grave || $json.doenca_grave || 'Não informado'}}",
            "Classificacao": "={{$json.resumo_vendedor?.classificacao || $json.classificacao || $json.Classificacao || 'Média'}}",
            "Score": "={{$json.resumo_vendedor?.score || $json.score || $json.Score || 50}}",
            "Plano_Sugerido": "={{$json.resumo_vendedor?.plano_sugerido || $json.plano_sugerido || $json.Plano_Sugerido || 'Bradesco Nacional'}}",
            "Documentos": "={{$json.resumo_vendedor?.documentos_necessarios || $json.documentos_necessarios || $json.Documentos || 'RG, CPF, Comprovante de Residência'}}",
            "Data_Qualificacao": "={{$json.resumo_vendedor?.timestamp_qualificacao || $json.timestamp_qualificacao || $json.Data_Qualificacao || $now.toISO()}}",
            "Status": "={{$json.status || $json.Status || 'Qualificado - Aguardando Vendedor'}}",
            "Vendedor_Nome": "={{$json.resumo_vendedor?.vendedor_nome || $json.vendedor_nome || $json.vendedor?.nome || 'Isabela'}}",
            "Observações_Mariana": "={{$json.resumo_vendedor?.observacoes_mariana || $json.observacoes_mariana || $json['Observações_Mariana'] || (($json.mensagem_mariana ? ('Inicial: ' + $json.mensagem_mariana) : '') + ($json.mensagem_mariana_loop ? ((($json.mensagem_mariana ? ' | ' : '') + 'Loop: ' + $json.mensagem_mariana_loop)) : '')) || ''}}",
            "Payload_JSON": "={{$json | json}}"
          }
        },
        "options": {"continueOnFail": true}
      },
      "id": "edc3acf5-551f-424a-b0ab-62f64addf4eb",
      "name": "📊 PLANILHA ISABELA - Leads Qualificados",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -7776,
        2032
      ],
      "typeVersion": 4
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.agendor.com.br/v3/deals",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Token token={{$json.vendedor.agendor_token}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"title\": \"{{$json.resumo_vendedor.nome}} - Bradesco {{$json.resumo_vendedor.plano_sugerido}}\",\n  \"value\": {{(Number($json.resumo_vendedor.total_vidas) || 1) * 350}},\n  \"contact\": {\n    \"name\": \"{{$json.resumo_vendedor.nome}}\",\n    \"email\": \"{{$json.resumo_vendedor.email}}\",\n    \"phone\": \"{{$json.resumo_vendedor.telefone}}\",\n    \"city\": \"{{$json.resumo_vendedor.cidade_estado}}\"\n  },\n  \"description\": \"{{$json.mensagem_vendedor_formatada}}\",\n  \"ranking\": {{$json.resumo_vendedor.score}},\n  \"dealStage\": 1\n}",
        "options": {"continueOnFail": true}
      },
      "id": "5043514d-2075-42fb-93e6-5b1aea2556e1",
      "name": "🎯 AGENDOR RODRIGO - Criar Deal",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -7776,
        2256
      ],
      "typeVersion": 4
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.agendor.com.br/v3/deals",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Token token={{$json.vendedor.agendor_token}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"title\": \"{{$json.resumo_vendedor.nome}} - Bradesco {{$json.resumo_vendedor.plano_sugerido}}\",\n  \"value\": {{(Number($json.resumo_vendedor.total_vidas) || 1) * 350}},\n  \"contact\": {\n    \"name\": \"{{$json.resumo_vendedor.nome}}\",\n    \"email\": \"{{$json.resumo_vendedor.email}}\",\n    \"phone\": \"{{$json.resumo_vendedor.telefone}}\",\n    \"city\": \"{{$json.resumo_vendedor.cidade_estado}}\"\n  },\n  \"description\": \"{{$json.mensagem_vendedor_formatada}}\",\n  \"ranking\": {{$json.resumo_vendedor.score}},\n  \"dealStage\": 1\n}",
        "options": {"continueOnFail": true}
      },
      "id": "af0d6ab5-79fc-4877-a0d5-6fc03bc30078",
      "name": "🎯 AGENDOR FABIANA - Criar Deal",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -7776,
        2480
      ],
      "typeVersion": 4
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.agendor.com.br/v3/deals",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Token token={{$json.vendedor.agendor_token}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"title\": \"{{$json.resumo_vendedor.nome}} - Bradesco {{$json.resumo_vendedor.plano_sugerido}}\",\n  \"value\": {{(Number($json.resumo_vendedor.total_vidas) || 1) * 350}},\n  \"contact\": {\n    \"name\": \"{{$json.resumo_vendedor.nome}}\",\n    \"email\": \"{{$json.resumo_vendedor.email}}\",\n    \"phone\": \"{{$json.resumo_vendedor.telefone}}\",\n    \"city\": \"{{$json.resumo_vendedor.cidade_estado}}\"\n  },\n  \"description\": \"{{$json.mensagem_vendedor_formatada}}\",\n  \"ranking\": {{$json.resumo_vendedor.score}},\n  \"dealStage\": 1\n}",
        "options": {"continueOnFail": true}
      },
      "id": "376e0bee-c58c-47ff-993c-96bcd50eb93d",
      "name": "🎯 AGENDOR JULIANA - Criar Deal",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -7776,
        2704
      ],
      "typeVersion": 4
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.agendor.com.br/v3/deals",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Token token={{$json.vendedor.agendor_token}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"title\": \"{{$json.resumo_vendedor.nome}} - Bradesco {{$json.resumo_vendedor.plano_sugerido}}\",\n  \"value\": {{(Number($json.resumo_vendedor.total_vidas) || 1) * 350}},\n  \"contact\": {\n    \"name\": \"{{$json.resumo_vendedor.nome}}\",\n    \"email\": \"{{$json.resumo_vendedor.email}}\",\n    \"phone\": \"{{$json.resumo_vendedor.telefone}}\",\n    \"city\": \"{{$json.resumo_vendedor.cidade_estado}}\"\n  },\n  \"description\": \"{{$json.mensagem_vendedor_formatada}}\",\n  \"ranking\": {{$json.resumo_vendedor.score}},\n  \"dealStage\": 1\n}",
        "options": {"continueOnFail": true}
      },
      "id": "4af10d52-e42d-4a84-b735-c4f8d3c63c11",
      "name": "🎯 AGENDOR MONIQUE - Criar Deal",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -7776,
        2928
      ],
      "typeVersion": 4
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.agendor.com.br/v3/deals",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Token token={{$json.vendedor.agendor_token}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"title\": \"{{$json.resumo_vendedor.nome}} - Bradesco {{$json.resumo_vendedor.plano_sugerido}}\",\n  \"value\": {{(Number($json.resumo_vendedor.total_vidas) || 1) * 350}},\n  \"contact\": {\n    \"name\": \"{{$json.resumo_vendedor.nome}}\",\n    \"email\": \"{{$json.resumo_vendedor.email}}\",\n    \"phone\": \"{{$json.resumo_vendedor.telefone}}\",\n    \"city\": \"{{$json.resumo_vendedor.cidade_estado}}\"\n  },\n  \"description\": \"{{$json.mensagem_vendedor_formatada}}\",\n  \"ranking\": {{$json.resumo_vendedor.score}},\n  \"dealStage\": 1\n}",
        "options": {"continueOnFail": true}
      },
      "id": "5bb50040-d65a-40d3-9e52-a340058d32c7",
      "name": "🎯 AGENDOR ISABELA - Criar Deal",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -7776,
        3152
      ],
      "typeVersion": 4
    },
    {
      "parameters": {
        "jsCode": "// Gera atraso humano: curto se a mensagem for pequena\nconst msg = $json.mensagem_mariana || $json.mensagem_mariana_loop || '';\nconst len = msg.trim().length;\nlet delay = 2; // padrão\nif (len < 80) delay = 1;             // respostas curtinhas\nelse if (len > 300) delay = 4;       // respostas longas\n// pequena aleatoriedade\ndelay = Math.max(1, Math.min(4, delay + (Math.random() < 0.5 ? 0 : 1)));\nreturn [{ ...$json, delay_segundos: delay }];"
      },
      "id": "f4355cc6-9d48-4dec-9019-db40486540ef",
      "name": "Gerar Delay Humano",
      "type": "n8n-nodes-base.code",
      "position": [
        -7328,
        -1728
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "amount": "={{$json.delay_segundos}}",
        "unit": "seconds",
        "options": {
          "continueOnFail": true,
          "alwaysOutputData": true
        }
      },
      "id": "wait-humano-001",
      "name": "Wait Humano (1-4s)",
      "type": "n8n-nodes-base.wait",
      "position": [
        -7104,
        -1728
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "amount": 3,
        "unit": "seconds"
      },
      "id": "f2609258-cf5a-44f3-b067-2efccb808aef",
      "name": "Simular Tempo Digitação",
      "type": "n8n-nodes-base.wait",
      "position": [
        -5760,
        -1728
      ],
      "typeVersion": 1,
      "webhookId": "699e88a8-045a-423c-8283-ac9439c6c052"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1bGuTWcNCMjTed91deAZo8eGwy38tqWh8C7rU6PPG27M",
          "mode": "list",
          "cachedResultName": "Leads_Brutos"
        },
        "sheetName": {
          "__rl": true,
          "value": "Leads_Brutos",
          "mode": "list"
        },
        "columnToMatchOn": "Lead_ID",
        "valueToMatchOn": "={{$json.lead_id}}",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Status": "={{$json.status || $json.Status || $json.situacao || $json.estado_lead || 'Aguardando_5min'}}",
            "Remarketing_Data": "={{$json.remarketing_data || $json.Remarketing_Data || $json.data_remarketing || ('Reengajamento_5min_agendado_' + $now.toISO())}}",
            "Ultima_Atividade": "={{$json.ultima_atividade || $json.Ultima_Atividade || $json.timestamp || $json.last_activity || $json.data_atividade || $now.toISO()}}"
          }
        },
        "options": {"continueOnFail": true}
      },
      "id": "78109ad1-2779-422c-846a-bb73f4173aff",
      "name": "Agendar Reengajamento 5min",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -3520,
        -288
      ],
      "typeVersion": 4,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "ZRCcorwTkMjhn6EC",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "amount": 30,
        "unit": "seconds"
      },
      "id": "a7bdb628-5583-43d0-8c0f-c80903d13248",
      "name": "Intervalo Entre Mensagens",
      "type": "n8n-nodes-base.wait",
      "position": [
        -7776,
        912
      ],
      "typeVersion": 1,
      "webhookId": "cbabee4b-546b-46d1-a1e2-3b2f20cb033e"
    },
    {
      "parameters": {
        "sendTo": "contato@abmixcorretora.com.br",
        "subject": "🚨 ERRO NO SISTEMA BRADESCO - Lead ID: {{$json.lead_id || 'N/A'}}",
        "message": "=🚨 *ERRO DETECTADO NO SISTEMA BRADESCO* 🚨\n\n📋 *Detalhes do Erro:*\n• **Lead ID:** {{$json.lead_id || 'Não informado'}}\n• **Nome Cliente:** {{$json.nome || 'Não informado'}}\n• **Telefone:** {{$json.telefone || 'Não informado'}}\n• **Email:** {{$json.email || 'Não informado'}}\n\n🔧 *Informações Técnicas:*\n• **Nó que Falhou:** {{$json.node_name || 'Nó não identificado'}}\n• **Tipo de Erro:** {{$json.error?.message || 'Erro não especificado'}}\n• **Código de Status:** {{$json.error?.status || 'N/A'}}\n• **Timestamp:** {{$now.toISO()}}\n\n📊 *Contexto do Lead:*\n• **Status:** {{$json.status || 'Não informado'}}\n• **Classificação:** {{$json.classificacao || 'Não informado'}}\n• **Score:** {{$json.score || 'Não informado'}}\n• **Vendedor Atribuído:** {{$json.vendedor_nome || 'Não atribuído'}}\n\n⚠️ *Ação Necessária:*\nVerifique o sistema e corrija o problema. O lead pode precisar de processamento manual.\n\n---\n*Sistema de Monitoramento Automático - Bradesco Saúde*",
        "options": {
          "continueOnFail": true
        }
      },
      "id": "error-notification-admin-001",
      "name": "Notificar Erro ao Admin",
      "type": "n8n-nodes-base.gmail",
      "position": [
        -4000,
        -2000
      ],
      "typeVersion": 2,
      "credentials": {
        "gmailOAuth2": {
          "id": "7GSgm7LZzmGeuYKf",
          "name": "Gmail OAuth2 account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1bGuTWcNCMjTed91deAZo8eGwy38tqWh8C7rU6PPG27M",
          "mode": "list",
          "cachedResultName": "Leads_Brutos"
        },
        "sheetName": {
          "__rl": true,
          "value": "Leads_Brutos",
          "mode": "name"
        },
        "columnToMatchOn": "Lead_ID",
        "valueToMatchOn": "={{$json.lead_id}}",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Status": "={{$json.status || $json.Status || $json.situacao || $json.estado_lead || 'Em_Qualificacao'}}",
            "Ultima_Atividade": "={{$json.ultima_atividade || $json.Ultima_Atividade || $json.timestamp || $json.last_activity || $json.data_atividade || $json.data_resposta || $now.toISO()}}"
          }
        },
        "options": {
          "continueOnFail": true
        }
      },
      "id": "atualizar-resposta-cliente-001",
      "name": "📝 Atualizar Resposta Cliente",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -7000,
        -500
      ],
      "typeVersion": 4,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "ZRCcorwTkMjhn6EC",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ========================================\n// MENSAGENS REMARKETING POR TENTATIVA\n// ========================================\n// Mensagens diferentes baseadas no número de tentativas\n\nconst dados = $input.all()[0].json;\n\n// Obter tentativa atual (será incrementada no próximo nó)\nconst tentativa = parseInt(dados.Tentativas_Remarketing || 0) + 1;\n\n// Mensagens por tentativa\nconst mensagensPorTentativa = {\n  1: \"Bom dia {{$json['Nome Completo']}}! ☀️\\n\\nOntem você demonstrou interesse no Bradesco Saúde.\\n\\nAinda precisa de um plano de saúde?\\n\\nConsigo valores especiais para contratação hoje! 💙\\n\\nÉ só me responder aqui.\\n\\n— Mariana · Bradesco Saúde\",\n  \n  2: \"Oi {{$json['Nome Completo']}}! 😊\\n\\nVi que você ainda não respondeu sobre o Bradesco Saúde.\\n\\n🔥 **ÚLTIMA CHANCE!** Condições especiais válidas apenas hoje!\\n\\nQuer saber os valores? É rapidinho! ⚡\\n\\n— Mariana · Bradesco Saúde\",\n  \n  3: \"Olá {{$json['Nome Completo']}}! 👋\\n\\nVou arquivar seu cadastro do Bradesco Saúde por falta de resposta.\\n\\nCaso precise no futuro, estarei sempre aqui para ajudar! 💙\\n\\nObrigada pelo interesse inicial.\\n\\n— Mariana · Bradesco Saúde\"\n};\n\n// Selecionar mensagem baseada na tentativa\nconst mensagemEscolhida = mensagensPorTentativa[tentativa] || mensagensPorTentativa[3];\n\n// Preparar resultado\nconst resultado = {\n  ...dados,\n  tentativa_remarketing: tentativa,\n  mensagem_remarketing: mensagemEscolhida,\n  tipo_mensagem: tentativa === 1 ? 'primeira' : (tentativa === 2 ? 'urgencia' : 'despedida'),\n  timestamp_mensagem: new Date().toISOString()\n};\n\nconsole.log(`Mensagem remarketing - Tentativa ${tentativa}: ${tentativa === 1 ? 'Primeira' : (tentativa === 2 ? 'Urgência' : 'Despedida')}`);\n\nreturn [resultado];"
      },
      "id": "mensagens-tentativa-001",
      "name": "💬 Mensagens por Tentativa",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6800,
        500
      ]
    },
    {
      "id": "if-anti-10h-remarketing",
      "name": "🚫 IF Anti-10h Remarketing",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -6800,
        700
      ],
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "verificar-atividade-9h",
              "leftValue": "={{ $json.Ultima_Atividade && new Date($json.Ultima_Atividade) >= new Date($now.set({hour:9,minute:0,second:0,millisecond:0}).toISO()) }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {"continueOnFail": true}
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://automacao-abmix-evolution-api.2ckrtx.easypanel.host/message/sendText/Bradesco",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "C52FDF6831B2-439F-9F6A-C9E68962A705"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number\": \"5511996163900\",\n  \"text\": \"📅 REMARKETING {{ $json['Lead_ID'] || 'sem_id' }} · {{ $json['Nome Completo'] || 'Cliente' }} · Tentativa: {{ ($json.Tentativas_Remarketing || 0) + 1 }} · {{ $now.toISO() }}\\n\\n📝 Observações: {{ $json.resumo_vendedor?.observacoes_mariana || (($json.mensagem_mariana ? ('Inicial: ' + $json.mensagem_mariana) : '') + ($json.mensagem_mariana_loop ? ((($json.mensagem_mariana ? ' | ' : '') + 'Loop: ' + $json.mensagem_mariana_loop)) : '') + ($json.hospital_preferencia && $json.hospital_preferencia !== 'Não informado' ? ((($json.mensagem_mariana || $json.mensagem_mariana_loop) ? ' | ' : '') + 'Hosp.: ' + $json.hospital_preferencia) : '') + ($json.tem_preexistencia && $json.tem_preexistencia !== 'Não informado' ? ' | Pré-existência: ' + $json.tem_preexistencia : '') + ($json.doenca_grave && $json.doenca_grave !== 'Não informado' ? ' | Doença grave: ' + $json.doenca_grave : '') + ($json.eh_portabilidade === true ? ' | Portabilidade: Sim' : '')) }}\"\n}",
        "options": {"continueOnFail": true}
      },
      "id": "copia-rodrigo-remarketing-001",
      "name": "👨‍💼 Cópia Rodrigo Remarketing",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -6400,
        800
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://automacao-abmix-evolution-api.2ckrtx.easypanel.host/message/sendText/Bradesco",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "C52FDF6831B2-439F-9F6A-C9E68962A705"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ '55' + String(($json[\"Telefone com DDD\"] || $json.telefone_limpo || $json.telefone || '').replace(/\\D/g,'')).replace(/^55/,'') }}"
            },
            {
              "name": "text",
              "value": "📌 REMARKETING 10h\\nCliente: {{$json['Nome Completo'] || 'N/I'}}\\nTelefone: {{$json['Telefone com DDD'] || 'N/I'}}\\nTentativa: {{($json.Tentativas_Remarketing || 0) + 1}}\\nLead_ID: {{$json.Lead_ID || 'N/I'}}\\nQuando: {{$now.toISO()}}"
            }
          ]
        },
        "options": {"continueOnFail": true}
      },
      "id": "copia-supervisor-remarketing-001",
      "name": "👨‍💼 Cópia Supervisor Remarketing",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -6200,
        800
      ]
    },
    {
      "parameters": {
        "jsCode": "// Verificar se já temos os custom fields em cache\nconst cache = $workflow.staticData.customFields;\nif (cache && Object.keys(cache).length > 0) {\n  console.log('Custom fields em cache:', Object.keys(cache).length);\n  return [{json: {cached: true, fields: cache}}];\n}\n// Se não tem cache, precisa buscar\nconsole.log('Cache vazio, precisa buscar custom fields');\nreturn [{json: {cached: false, fields: {}}}];"
      },
      "id": "verificar-cache-agendor-001",
      "name": "🔍 Verificar Cache Custom Fields",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3500,
        -864
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "cache-vazio",
              "leftValue": "={{$json.cached}}",
              "rightValue": "false",
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {"continueOnFail": true}
      },
      "id": "if-cache-vazio-agendor-001",
      "name": "❓ IF Cache Vazio",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -3280,
        -864
      ]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "{{$env.AGENDOR_BASE_URL}}/custom_fields/people",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Token {{$json.vendedor.agendor_token}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "timeout": 60000,
          "continueOnFail": true
        }
      },
      "id": "buscar-custom-fields-agendor-001",
      "name": "🔧 Buscar Custom Fields Agendor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -3060,
        -964
      ]
    },
    {
      "parameters": {
        "jsCode": "// Processar custom fields e salvar em cache\nconst response = $input.first();\nconst fields = response.json.data || [];\nconst cache = {};\n\n// Mapear name -> id para campos relevantes\nfields.forEach(field => {\n  if (field.name && field.id) {\n    // Mapear nomes conhecidos\n    const fieldMap = {\n      'Idade do Titular': 'idade_titular',\n      'Total de Vidas': 'total_vidas', \n      'Idades Dependentes': 'idades_dependentes',\n      'Tipo Contratação': 'tipo_contratacao',\n      'Hospital Preferência': 'hospital_preferencia',\n      'Plano Atual': 'plano_atual',\n      'Preexistência': 'preexistencia',\n      'Doença Grave': 'doenca_grave',\n      'Classificação': 'classificacao',\n      'Score': 'score',\n      'Plano Sugerido': 'plano_sugerido'\n    };\n    \n    const mappedName = fieldMap[field.name] || field.name.toLowerCase().replace(/\\s+/g, '_');\n    cache[mappedName] = field.id;\n  }\n});\n\n// Salvar no cache do workflow\n$workflow.staticData.customFields = cache;\n\nconsole.log('Custom fields mapeados e salvos:', Object.keys(cache));\n\nreturn [{json: {fields_cached: true, total_fields: Object.keys(cache).length, cache, original_data: response.json}}];"
      },
      "id": "salvar-cache-agendor-001",
      "name": "💾 Salvar Cache Fields",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2840,
        -964
      ]
    },
    {
      "parameters": {
        "jsCode": "// ========================================\n// PROCESSAR E VALIDAR LEAD PARA AGENDOR\n// ========================================\n\nconst items = $input.all();\nconst customFields = $workflow.staticData.customFields || {};\n\nconst out = items.map((it) => {\n  const lead = it.json;\n  \n  // VALIDAÇÃO MÍNIMA - precisa de pelo menos um identificador\n  if (!lead.Nome && !lead.Email && !lead.Telefone) {\n    return {json: {\n      ...lead,\n      erro: 'faltam_dados_minimos',\n      status_envio: 'rejeitado',\n      processar: false\n    }};\n  }\n  \n  // TELEFONE E.164 CORRETO (aceita 10-11 dígitos, sem duplicar DDI)\n  const telefone_e164 = (() => {\n    const d = String(lead.Telefone || '').replace(/\\\\D/g,'');\n    if (d.length < 10) return '';\n    const n = d.startsWith('55') ? d : '55' + d;\n    return '+' + n;\n  })();\n  \n  // EMAIL SANITIZADO\n  const email = String(lead.Email || '').toLowerCase().trim();\n  const emailValido = email.includes('@') && email.includes('.');\n  \n  // DATA NORMALIZADA\n  const data_qualificacao = (() => {\n    if (!lead.Data_Qualificacao) return new Date().toISOString().split('T')[0];\n    const d = new Date(lead.Data_Qualificacao);\n    return isNaN(d.getTime()) ? '' : d.toISOString().split('T')[0];\n  })();\n  \n  // CIDADE/ESTADO\n  const [cidade, uf] = (lead.Cidade_Estado || '').split(/[,\\/]/).map(s => s.trim());\n  \n  // USAR DADOS DO VENDEDOR JÁ ATRIBUÍDO\n  if (!lead.vendedor || !lead.vendedor.agendor_token) {\n    return {json: {\n      ...lead,\n      erro: 'vendedor_sem_token|' + (lead.vendedor?.nome || 'indefinido'),\n      status_envio: 'erro',\n      processar: false\n    }};\n  }\n  \n  // STAGE MAPPING\n  const stageMap = {\n    'Novo': 'new',\n    'Qualificado': 'qualified', \n    'Proposta': 'proposal',\n    'Fechado_Ganho': 'won',\n    'Fechado_Perdido': 'lost'\n  };\n  \n  // CUSTOM FIELDS (robustos - só envia os que existem)\n  const camposParaEnviar = {};\n  const camposAusentes = [];\n  \n  // Mapear apenas campos que existem\n  const mapeamento = {\n    'idade_titular': lead.Idade_Titular,\n    'total_vidas': lead.Total_Vidas,\n    'idades_dependentes': lead.Idades_Dependentes,\n    'tipo_contratacao': lead.Contratacao,\n    'hospital_preferencia': lead.Hospital_Preferencia,\n    'plano_atual': lead.Plano_Atual,\n    'preexistencia': lead.Preexistencia,\n    'doenca_grave': lead.Doenca_Grave,\n    'classificacao': lead.Classificacao,\n    'score': lead.Score,\n    'plano_sugerido': lead.Plano_Sugerido\n  };\n  \n  for (const [campo, valor] of Object.entries(mapeamento)) {\n    if (valor !== undefined && valor !== '') {\n      if (customFields[campo]) {\n        camposParaEnviar[customFields[campo]] = String(valor);\n      } else {\n        camposAusentes.push(campo);\n      }\n    }\n  }\n  \n  return {json: {\n    ...lead,\n    telefone_e164,\n    email_normalizado: emailValido ? email : '',\n    data_qualificacao,\n    cidade,\n    uf,\n    vendedor_token: lead.vendedor.agendor_token,\n    vendedor_sheet: lead.vendedor.leads_sheet_tab,\n    vendedor_nome: lead.vendedor.nome,\n    stage: stageMap[lead.Status] || 'qualified',\n    custom_fields: camposParaEnviar,\n    custom_fields_ausentes: camposAusentes.join(','),\n    processar: true,\n    agendor_person_id: lead.Agendor_Person_ID || '',\n    agendor_deal_id: lead.Agendor_Deal_ID || ''\n  }};\n});\n\nconsole.log(`Leads processados para Agendor: ${out.length}`);\nreturn out;"
      },
      "id": "processar-lead-agendor-001",
      "name": "🔄 Processar Lead para Agendor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2620,
        -864
      ]
    },
    {
      "parameters": {
        "jsCode": "// Se já tem person_id, pular criação\nconst items = $input.all();\nconst out = items.map((it) => {\n  const lead = it.json;\n  if (lead.agendor_person_id) {\n    return {json: {\n      ...lead,\n      person_exists: true,\n      person_id: lead.agendor_person_id,\n      skip_person_create: true\n    }};\n  }\n  // Precisa criar pessoa\n  return {json: {\n    ...lead,\n    person_exists: false,\n    skip_person_create: false\n  }};\n});\n\nreturn out;"
      },
      "id": "verificar-pessoa-agendor-001",
      "name": "👤 Verificar Pessoa Existente",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2400,
        -864
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "precisa-criar-pessoa",
              "leftValue": "={{$json.skip_person_create}}",
              "rightValue": "false",
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {"continueOnFail": true}
      },
      "id": "if-criar-pessoa-agendor-001",
      "name": "❓ IF Criar Pessoa",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -2180,
        -864
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{$env.AGENDOR_BASE_URL}}/people/upsert",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Token {{$json.vendedor.agendor_token}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"externalId\": \"{{$json.Lead_ID}}\",\n  \"name\": \"{{$json.Nome}}\",\n  \"contact\": {\n    \"email\": \"{{$json.email_normalizado}}\",\n    \"mobile\": \"{{$json.telefone_e164}}\"\n  },\n  \"address\": {\n    \"city\": \"{{$json.cidade}}\",\n    \"state\": \"{{$json.uf}}\"\n  },\n  \"customFields\": {{JSON.stringify($json.custom_fields)}}\n}",
        "options": {
          "timeout": 60000,
          "continueOnFail": true,
          "fullResponse": true
        }
      },
      "id": "upsert-pessoa-agendor-001",
      "name": "👤 Upsert Pessoa Agendor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -1960,
        -964
      ]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "{{$env.AGENDOR_BASE_URL}}/people/{{$json.data.id || $json.person_id || $json.agendor_person_id}}/deals?status=open",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Token {{$json.vendedor.agendor_token}}"
            }
          ]
        },
        "options": {
          "timeout": 60000,
          "continueOnFail": true,
          "fullResponse": true
        }
      },
      "id": "verificar-deals-agendor-001",
      "name": "💼 Verificar Deal Existente",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -1740,
        -864
      ]
    },
    {
      "parameters": {
        "jsCode": "// ========================================\n// DECIDIR AÇÃO DEAL COM ANTIRREGRESSÃO\n// ========================================\n\nconst items = $input.all();\n\nconst out = items.map((it) => {\n  const lead = it.json;\n  const deals = lead.data || [];\n  const tituloEsperado = 'Bradesco ' + (lead.Plano_Sugerido || 'Saúde') + ' - ' + lead.Nome;\n  \n  // Procurar deal existente\n  const dealExistente = deals.find(d => \n    d.title && d.title.includes('Bradesco') && d.title.includes(lead.Nome)\n  ) || deals.find(d => d.externalId === lead.Lead_ID);\n  \n  // Se já tem deal_id salvo, usar ele\n  const dealId = lead.agendor_deal_id || (dealExistente ? dealExistente.id : '');\n  \n  // ANTIRREGRESSÃO DE STAGE\n  const stageHierarchy = ['new', 'qualified', 'proposal', 'won', 'lost'];\n  const currentStageIndex = dealExistente ? \n    stageHierarchy.indexOf(dealExistente.stage) : -1;\n  const newStageIndex = stageHierarchy.indexOf(lead.stage);\n  \n  // Só avança, nunca regride\n  const shouldUpdateStage = newStageIndex > currentStageIndex;\n  \n  return {json: {\n    ...lead,\n    deal_exists: !!dealExistente,\n    deal_id: dealId,\n    current_stage: dealExistente?.stage || '',\n    new_stage: lead.stage,\n    should_update_stage: shouldUpdateStage,\n    action: dealExistente ? \n      (shouldUpdateStage ? 'update_deal' : 'skip_deal') : \n      'create_deal',\n    titulo_deal: tituloEsperado\n  }};\n});\n\nreturn out;"
      },
      "id": "decidir-acao-deal-agendor-001",
      "name": "🎯 Decidir Ação Deal",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1520,
        -864
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "action-create",
              "leftValue": "={{$json.action}}",
              "rightValue": "create_deal",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {"continueOnFail": true}
      },
      "id": "if-criar-deal-agendor-001",
      "name": "❓ IF Criar Deal",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -1300,
        -864
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{$env.AGENDOR_BASE_URL}}/people/{{$json.data.id || $json.person_id || $json.agendor_person_id}}/deals",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Token {{$json.vendedor.agendor_token}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"title\": \"{{$json.titulo_deal}}\",\n  \"value\": {{Number($json.Total_Vidas || 1) * 350}},\n  \"status\": \"open\",\n  \"stage\": \"{{$json.stage}}\",\n  \"externalId\": \"{{$json.Lead_ID}}\"\n}",
        "options": {
          "timeout": 60000,
          "continueOnFail": true,
          "fullResponse": true
        }
      },
      "id": "criar-deal-agendor-001",
      "name": "💼 Criar Deal",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -1080,
        -964
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "action-update",
              "leftValue": "={{$json.action}}",
              "rightValue": "update_deal",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {"continueOnFail": true}
      },
      "id": "if-atualizar-deal-agendor-001",
      "name": "❓ IF Atualizar Deal",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -1300,
        -764
      ]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "{{$env.AGENDOR_BASE_URL}}/deals/{{$json.deal_id}}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Token {{$json.vendedor.agendor_token}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"stage\": \"{{$json.new_stage}}\"\n}",
        "options": {
          "timeout": 60000,
          "continueOnFail": true,
          "fullResponse": true
        }
      },
      "id": "atualizar-deal-agendor-001",
      "name": "💼 Atualizar Deal Stage",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -1080,
        -764
      ]
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1bUg8Kqhl_4dhIy_unfqqBYqhV9ICrGyHu3muv0LW1Hk",
          "mode": "list"
        },
        "sheetName": {
          "__rl": true,
          "value": "Leads_Bradesco",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Lead_ID": "={{$json.Lead_ID}}",
            "Nome": "={{$json.Nome}}",
            "Telefone": "={{$json.Telefone}}",
            "Email": "={{$json.Email}}",
            "Cidade_Estado": "={{$json.Cidade_Estado}}",
            "Classificacao": "={{$json.Classificacao}}",
            "Score": "={{$json.Score}}",
            "Vendedor_Nome": "={{$json.vendedor_nome}}",
            "Agendor_Person_ID": "={{$node[\"👤 Upsert Pessoa Agendor\"].json.data.id || $json.person_id || $json.agendor_person_id || 'erro'}}",
            "Agendor_Deal_ID": "={{$node[\"💼 Criar Deal\"].json.data.id || $node[\"💼 Atualizar Deal Stage\"].json.data.id || $json.deal_id || ''}}",
            "Stage_Atual": "={{$json.new_stage || $json.stage}}",
            "Status_Envio": "={{$json.error ? 'erro' : 'ok'}}",
            "HTTP_Code": "={{$json.statusCode || 0}}",
            "Erro": "={{$json.erro || ($json.error ? 'etapa|' + $json.error.message : '')}}",
            "Custom_Fields_Ausentes": "={{$json.custom_fields_ausentes}}",
            "Data_Processamento": "={{$now.toISO()}}"
          }
        },
        "options": {
          "timeout": 60000,
          "continueOnFail": true
        }
      },
      "id": "log-vendedor-agendor-001",
      "name": "📊 Log Planilha Vendedor",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        -860,
        -864
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "ZRCcorwTkMjhn6EC",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1bGuTWcNCMjTed91deAZo8eGwy38tqWh8C7rU6PPG27M",
          "mode": "list"
        },
        "sheetName": {
          "__rl": true,
          "value": "Leads_Brutos",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Agendor_Person_ID": "={{$node[\"👤 Upsert Pessoa Agendor\"].json.data.id || $json.person_id || $json.agendor_person_id || $json.Agendor_Person_ID || $json.contato_id || 'erro'}}",
            "Agendor_Deal_ID": "={{$node[\"💼 Criar Deal\"].json.data.id || $node[\"💼 Atualizar Deal Stage\"].json.data.id || $json.deal_id || $json.agendor_deal_id || $json.Agendor_Deal_ID || $json.negocio_id || ''}}",
            "Agendor_Status": "={{$json.agendor_status || $json.Agendor_Status || $json.status_agendor || ($json.error ? 'erro' : 'sincronizado')}}",
            "Agendor_Sync": "={{$json.agendor_sync || $json.Agendor_Sync || $json.sincronizado || $json.data_sync || $json.timestamp_sync || $now.toISO()}}",
            "Ultima_Atividade": "={{$json.ultima_atividade || $json.Ultima_Atividade || $json.timestamp || $json.last_activity || $json.data_atividade || $now.toISO()}}"
          }
        },
        "options": {
          "continueOnFail": true
        }
      },
      "id": "marcar-sincronizado-agendor-001",
      "name": "✅ Marcar Sincronizado Agendor",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        -640,
        -864
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "ZRCcorwTkMjhn6EC",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Controle de retry manual para HTTP failures\nconst items = $input.all();\n\nconst out = items.map((it) => {\n  const data = it.json;\n  const tentativas = (data.retry_count || 0) + 1;\n  const maxTentativas = 3;\n  \n  // Verificar se é erro que permite retry\n  const isRetryableError = data.error && (\n    data.statusCode >= 500 || \n    data.statusCode === 429 ||\n    data.statusCode === 0 || // timeout\n    !data.statusCode // network error\n  );\n  \n  const shouldRetry = isRetryableError && tentativas <= maxTentativas;\n  \n  // Calcular delay: 2s, 5s, 15s\n  const delays = [2000, 5000, 15000];\n  const delayMs = delays[tentativas - 1] || 15000;\n  \n  return {json: {\n    ...data,\n    retry_count: tentativas,\n    should_retry: shouldRetry,\n    delay_ms: delayMs,\n    max_tentativas: maxTentativas,\n    is_retryable_error: isRetryableError\n  }};\n});\n\nreturn out;"
      },
      "id": "controle-retry-agendor-001",
      "name": "🔄 Controle Retry Manual",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1960,
        -764
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "should-retry",
              "leftValue": "={{$json.should_retry}}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {"continueOnFail": true}
      },
      "id": "if-retry-agendor-001",
      "name": "🔁 IF Should Retry",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -1740,
        -764
      ]
    },
    {
      "parameters": {
        "amount": "={{ Math.floor($json.delay_ms / 1000) }}",
        "unit": "seconds",
        "options": {
          "continueOnFail": true,
          "alwaysOutputData": true
        }
      },
      "id": "wait-retry-agendor-001",
      "name": "⏳ Wait Retry",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        -1520,
        -664
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          },
          {
            "node": "Proteção Contra Pico",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Proteção Contra Pico",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Proteção Contra Pico": {
      "main": [
        [
          {
            "node": "CTRL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CTRL": {
      "main": [
        [
          {
            "node": "Processar Dados Iniciais",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Processar Dados Iniciais": {
      "main": [
        [
          {
            "node": "📋 Salvar Leads Brutos",
            "type": "main",
            "index": 0
          },
          {
            "node": "WhatsApp Resposta Inicial",
            "type": "main",
            "index": 0
          },
          {
            "node": "Email Controle Interno",
            "type": "main",
            "index": 0
          },
          {
            "node": "Telefone Válido? (Inicial)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Email Controle Interno",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Telefone Válido? (Inicial)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telefone Válido? (Inicial)": {
      "main": [
        [
          {
            "node": "WhatsApp Resposta Inicial",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp Resposta Inicial": {
      "main": [
        [
          {
            "node": "Gerar Delay Humano",
            "type": "main",
            "index": 0
          },
          {
            "node": "Status Digitando ON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gerar Delay Humano": {
      "main": [
        [
          {
            "node": "Wait Humano (1-4s)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait Humano (1-4s)": {
      "main": [
        [
          {
            "node": "Status Digitando ON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Status Digitando ON": {
      "main": [
        [
          {
            "node": "Preparar Prompt Mariana",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Prompt Mariana": {
      "main": [
        [
          {
            "node": "OpenAI Primeira Qualificação",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Primeira Qualificação": {
      "main": [
        [
          {
            "node": "Processar Resposta OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Notificar Erro ao Admin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Processar Resposta OpenAI": {
      "main": [
        [
          {
            "node": "Status Digitando OFF",
            "type": "main",
            "index": 0
          },
          {
            "node": "WhatsApp Enviar Mariana",
            "type": "main",
            "index": 0
          },
          {
            "node": "É Portabilidade?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Status Digitando OFF": {
      "main": [
        [
          {
            "node": "WhatsApp Enviar Mariana",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Resposta Cliente WhatsApp": {
      "main": [
        [
          {
            "node": "Responder Webhook Cliente",
            "type": "main",
            "index": 0
          },
          {
            "node": "Processar Resposta Cliente",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Processar Resposta Cliente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Processar Resposta Cliente": {
      "main": [
        [
          {
            "node": "Telefone Válido? (Webhook)",
            "type": "main",
            "index": 0
          },
          {
            "node": "📝 Atualizar Resposta Cliente",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Telefone Válido? (Webhook)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telefone Válido? (Webhook)": {
      "main": [
        [
          {
            "node": "É Áudio?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telefone Válido? (Cliente)": {
      "main": [
        [
          {
            "node": "É Áudio?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "É Áudio?": {
      "main": [
        [
          {
            "node": "Confirmar Áudio Recebido",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Respostas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Confirmar Áudio Recebido": {
      "main": [
        [
          {
            "node": "Baixar Áudio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baixar Áudio": {
      "main": [
        [
          {
            "node": "Transcrever Áudio OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Notificar Erro ao Admin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcrever Áudio OpenAI": {
      "main": [
        [
          {
            "node": "Merge Respostas",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Notificar Erro ao Admin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Respostas": {
      "main": [
        [
          {
            "node": "Atualizar Contexto Conversa",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Atualizar Contexto Conversa": {
      "main": [
        [
          {
            "node": "Dados Completos?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dados Completos?": {
      "main": [
        [
          {
            "node": "OpenAI Continuar Conversa",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Preparar Resumo Vendedor Completo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Continuar Conversa": {
      "main": [
        [
          {
            "node": "Processar Resposta OpenAI (loop)",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Notificar Erro ao Admin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Processar Resposta OpenAI (loop)": {
      "main": [
        [
          {
            "node": "Status Digitando Pós-OpenAI",
            "type": "main",
            "index": 0
          },
          {
            "node": "Condição de Parada Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Status Digitando Pós-OpenAI": {
      "main": [
        [
          {
            "node": "WhatsApp Enviar Mariana (continuação)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp Enviar Mariana (continuação)": {
      "main": [
        [
          {
            "node": "Atualizar Contexto Conversa",
            "type": "main",
            "index": 0
          },
          {
            "node": "Preparar Resumo Vendedor Completo",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Notificar Erro ao Admin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Resumo Vendedor Completo": {
      "main": [
        [
          {
            "node": "Validar Dados Antes Planilha",
            "type": "main",
            "index": 0
          },
          {
            "node": "Sistema Rodízio Vendedores",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validar Dados Antes Planilha": {
      "main": [
        [
          {
            "node": "Sistema Rodízio Vendedores",
            "type": "main",
            "index": 0
          },
          {
            "node": "WhatsApp Supervisor (cópia)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Salvar Leads Qualificados",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "WhatsApp Supervisor (cópia)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sistema Rodízio Vendedores": {
      "main": [
        [
          {
            "node": "Selecionar Destinos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Selecionar Destinos": {
      "main": [
        [
          {
            "node": "📊 PLANILHA RODRIGO - Leads Qualificados",
            "type": "main",
            "index": 0
          },
          {
            "node": "Salvar Leads Qualificados",
            "type": "main",
            "index": 0
          },
          {
            "node": "Email Vendedor Rico Formatado",
            "type": "main",
            "index": 0
          },
          {
            "node": "WhatsApp Vendedor",
            "type": "main",
            "index": 0
          },
          {
            "node": "Criar Deal Agendor",
            "type": "main",
            "index": 0
          },
          {
            "node": "Mensagem Final Cliente",
            "type": "main",
            "index": 0
          },
          {
            "node": "📊 PLANILHA FABIANA - Leads Qualificados",
            "type": "main",
            "index": 0
          },
          {
            "node": "📊 PLANILHA JULIANA - Leads Qualificados",
            "type": "main",
            "index": 0
          },
          {
            "node": "📊 PLANILHA MONIQUE - Leads Qualificados",
            "type": "main",
            "index": 0
          },
          {
            "node": "📊 PLANILHA ISABELA - Leads Qualificados",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "📊 PLANILHA FABIANA - Leads Qualificados",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "📊 PLANILHA JULIANA - Leads Qualificados",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "📊 PLANILHA MONIQUE - Leads Qualificados",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "📊 PLANILHA ISABELA - Leads Qualificados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📊 PLANILHA RODRIGO - Leads Qualificados": {
      "main": [
        [
          {
            "node": "🎯 AGENDOR RODRIGO - Criar Deal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📊 PLANILHA FABIANA - Leads Qualificados": {
      "main": [
        [
          {
            "node": "🎯 AGENDOR FABIANA - Criar Deal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📊 PLANILHA JULIANA - Leads Qualificados": {
      "main": [
        [
          {
            "node": "🎯 AGENDOR JULIANA - Criar Deal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📊 PLANILHA MONIQUE - Leads Qualificados": {
      "main": [
        [
          {
            "node": "🎯 AGENDOR MONIQUE - Criar Deal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📊 PLANILHA ISABELA - Leads Qualificados": {
      "main": [
        [
          {
            "node": "🎯 AGENDOR ISABELA - Criar Deal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Salvar Leads Qualificados": {
      "main": [
        [
          {
            "node": "Email Vendedor Rico Formatado",
            "type": "main",
            "index": 0
          },
          {
            "node": "🔍 Verificar Cache Custom Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email Vendedor Rico Formatado": {
      "main": [
        [
          {
            "node": "WhatsApp Vendedor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp Vendedor": {
      "main": [
        [
          {
            "node": "Criar Deal Agendor",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Notificar Erro ao Admin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Criar Deal Agendor": {
      "main": [
        [
          {
            "node": "Mensagem Final Cliente",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Notificar Erro ao Admin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Diário 10:00": {
      "main": [
        [
          {
            "node": "IF Remarketing ON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Remarketing ON": {
      "main": [
        [
          {
            "node": "Buscar Leads Pendentes",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Buscar Leads Pendentes": {
      "main": [
        [
          {
            "node": "Loop Leads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Leads": {
      "main": [
        [
          {
            "node": "🚫 IF Anti-10h Remarketing",
            "type": "main",
            "index": 0
          },
          {
            "node": "💬 Mensagens por Tentativa",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mensagem Dia Seguinte": {
      "main": [
        [
          {
            "node": "Decrementar Execuções",
            "type": "main",
            "index": 0
          },
          {
            "node": "Atualizar Status Remarketing",
            "type": "main",
            "index": 0
          },
          {
            "node": "👨‍💼 Cópia Rodrigo Remarketing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "👨‍💼 Cópia Rodrigo Remarketing",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Notificar Erro ao Admin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decrementar Execuções": {
      "main": [
        [
          {
            "node": "Atualizar Status Remarketing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agendar Reengajamento 5min": {
      "main": [
        [
          {
            "node": "Intervalo Entre Mensagens",
            "type": "main",
            "index": 0
          },
          {
            "node": "Decrementar Execuções",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Intervalo Entre Mensagens": {
      "main": [
        [
          {
            "node": "Simular Tempo Digitação",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simular Tempo Digitação": {
      "main": [
        [
          {
            "node": "Notificar Erro ao Admin",
            "type": "main",
            "index": 0
          },
          {
            "node": "Status Digitando OFF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📋 Salvar Leads Brutos": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🚫 IF Anti-10h Remarketing": {
      "main": [
        [
          {
            "node": "Mensagem Dia Seguinte",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Mensagem Dia Seguinte",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "💬 Mensagens por Tentativa": {
      "main": [
        [
          {
            "node": "Mensagem Dia Seguinte",
            "type": "main",
            "index": 0
          },
          {
            "node": "🚫 IF Anti-10h Remarketing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp Enviar Mariana": {
      "main": [
        [
          {
            "node": "Preparar Resumo Vendedor Completo",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Notificar Erro ao Admin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "É Portabilidade?": {
      "main": [
        [
          {
            "node": "Enviar Link Portabilidade",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Simular Tempo Digitação",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Condição de Parada Loop": {
      "main": [
        [
          {
            "node": "Telefone Válido? (Final)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Status Digitando Pós-OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telefone Válido? (Final)": {
      "main": [
        [
          {
            "node": "WhatsApp Enviar Mariana (continuação)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "👨‍💼 Cópia Rodrigo Remarketing": {
      "main": [
        [
          {
            "node": "👨‍💼 Cópia Supervisor Remarketing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "👨‍💼 Cópia Supervisor Remarketing": {
      "main": [
        [
          {
            "node": "Atualizar Status Remarketing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Atualizar Status Remarketing": {
      "main": [
        [
          {
            "node": "Intervalo Entre Mensagens",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mensagem Final Cliente": {
      "main": [
        [
          {
            "node": "Agendar Reengajamento 5min",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🔍 Verificar Cache Custom Fields": {
      "main": [
        [
          {
            "node": "❓ IF Cache Vazio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "❓ IF Cache Vazio": {
      "main": [
        [
          {
            "node": "🔧 Buscar Custom Fields Agendor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "🔄 Processar Lead para Agendor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🔧 Buscar Custom Fields Agendor": {
      "main": [
        [
          {
            "node": "💾 Salvar Cache Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "💾 Salvar Cache Fields": {
      "main": [
        [
          {
            "node": "🔄 Processar Lead para Agendor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🔄 Processar Lead para Agendor": {
      "main": [
        [
          {
            "node": "👤 Verificar Pessoa Existente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "👤 Verificar Pessoa Existente": {
      "main": [
        [
          {
            "node": "❓ IF Criar Pessoa",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "❓ IF Criar Pessoa": {
      "main": [
        [
          {
            "node": "👤 Upsert Pessoa Agendor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "💼 Verificar Deal Existente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "👤 Upsert Pessoa Agendor": {
      "main": [
        [
          {
            "node": "💼 Verificar Deal Existente",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "🔄 Controle Retry Manual",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "💼 Verificar Deal Existente": {
      "main": [
        [
          {
            "node": "🎯 Decidir Ação Deal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🎯 Decidir Ação Deal": {
      "main": [
        [
          {
            "node": "❓ IF Criar Deal",
            "type": "main",
            "index": 0
          },
          {
            "node": "❓ IF Atualizar Deal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "❓ IF Criar Deal": {
      "main": [
        [
          {
            "node": "💼 Criar Deal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "❓ IF Atualizar Deal": {
      "main": [
        [
          {
            "node": "💼 Atualizar Deal Stage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "💼 Criar Deal": {
      "main": [
        [
          {
            "node": "📊 Log Planilha Vendedor",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "🔄 Controle Retry Manual",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "💼 Atualizar Deal Stage": {
      "main": [
        [
          {
            "node": "📊 Log Planilha Vendedor",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "🔄 Controle Retry Manual",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📊 Log Planilha Vendedor": {
      "main": [
        [
          {
            "node": "✅ Marcar Sincronizado Agendor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "✅ Marcar Sincronizado Agendor": {
      "main": [
        [
          {
            "node": "Decrementar Execuções",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🔄 Controle Retry Manual": {
      "main": [
        [
          {
            "node": "🔁 IF Should Retry",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🔁 IF Should Retry": {
      "main": [
        [
          {
            "node": "⏳ Wait Retry",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Decrementar Execuções",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "⏳ Wait Retry": {
      "main": [
        [
          {
            "node": "👤 Upsert Pessoa Agendor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "timezone": "America/Sao_Paulo"
  }
}
